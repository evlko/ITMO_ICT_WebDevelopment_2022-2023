{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web Dev Course Documentation to-do","title":"Web Dev Course Documentation"},{"location":"#web-dev-course-documentation","text":"to-do","title":"Web Dev Course Documentation"},{"location":"lab-1/","text":"Laboratory 1 Task 1 \u041a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0438 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP . \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0441\u044b\u043b\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u2014 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u041e\u0431\u0430 \u043f\u0435\u0447\u0430\u0442\u0430\u044e\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. client.py . import socket def main (): sock = socket . socket ( family = socket . AF_INET , type = socket . SOCK_DGRAM ) serverAddressPort = ( \"localhost\" , 9091 ) sock . sendto ( str . encode ( \"Hello, server!\" ), serverAddressPort ) data , address = sock . recvfrom ( 1024 ) print ( data . decode ()) if __name__ == \"__main__\" : main () server.py import socket , sys def main (): sock = socket . socket ( family = socket . AF_INET , type = socket . SOCK_DGRAM ) sock . bind (( \"localhost\" , 9091 )) while True : data , address = sock . recvfrom ( 1024 ) print ( data . decode ()) sock . sendto ( str . encode ( \"Hello, client!\" ), address ) if __name__ == \"__main__\" : try : main () except KeyboardInterrupt : print ( \"Interrupted\" ) sys . exit ( 0 ) Task 2 \u041a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0438 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP . \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u043c \u0434\u0430\u043d\u043d\u044b\u043c \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u041a\u043e\u0433\u0434\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435, \u0442\u043e \u043e\u043d \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044e calc_parallelogram_area , \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0434\u0432\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430, \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. client.py import socket def main (): sock = socket . socket ( family = socket . AF_INET , type = socket . SOCK_STREAM ) sock . connect (( \"localhost\" , 9092 )) s , h = input ( \"Enter the side and height of the par-gram separated by a space: \" ) . split () sock . sendall ( str . encode ( \" \\n \" . join ([ str ( s ), str ( h )]))) data = sock . recv ( 1024 ) sock . close () print ( data . decode ()) if __name__ == \"__main__\" : main () server.py import socket , sys def calc_parallelogram_area ( side , height ): return side * height def main (): sock = socket . socket ( family = socket . AF_INET , type = socket . SOCK_STREAM ) sock . bind (( \"localhost\" , 9092 )) sock . listen ( 1 ) conn , addr = sock . accept () while True : data = conn . recv ( 1024 ) if not data : break s , h = [ int ( i ) for i in data . decode () . split ( \" \\n \" )] conn . send ( str . encode ( str ( calc_parallelogram_area ( s , h )))) conn . close () if __name__ == \"__main__\" : try : main () except KeyboardInterrupt : print ( \"Interrupted\" ) sys . exit ( 0 ) Task 3 \u041a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0438 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP . \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html . server.py import socket , sys def main (): sock = socket . socket ( family = socket . AF_INET , type = socket . SOCK_STREAM ) sock . bind (( \"localhost\" , 9093 )) sock . listen ( 1 ) while True : conn , addr = sock . accept () conn . recv ( 16384 ) response_type = \"HTTP/1.0 200 OK \\n \" headers = \"Content-Type: text/html \\n\\n \" file = open ( \"index.html\" , \"r\" ) body = file . read () resp = response_type + headers + body conn . send ( resp . encode ( \"utf-8\" )) file . close () conn . close () if __name__ == \"__main__\" : try : main () except KeyboardInterrupt : print ( \"Interrupted\" ) sys . exit ( 0 ) Task 4 \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u043d\u0430 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0435 TCP \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 threading . \u041b\u043e\u0433\u0438\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u044b: \u041a\u043e\u0433\u0434\u0430 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0442\u043e \u043e\u043d \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\u043c\u0438 \u043a\u043b\u0430\u0441\u0441\u0430 Client , \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0435\u0433\u043e \u0438\u043c\u0435\u043d\u0438; \u041f\u0440\u0438 \u043f\u0435\u0440\u0432\u043e\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0443\u0441\u043b\u043e\u0432\u043d\u044b\u0439 NICKNAME \u0438 \u0436\u0434\u0451\u0442 \u043e\u0442 \u043d\u0435\u0433\u043e \u043e\u0442\u0432\u0435\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0435\u0433\u043e \u0438\u043c\u0435\u043d\u0435\u043c; \u041a\u0430\u043a \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 NICKNAME , \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0437\u0430\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u0432 \u0441\u043f\u0438\u0441\u043e\u043a. \u0421\u0430\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0434\u0432\u0430 \u0442\u0440\u0435\u0434\u0430: receive \u0438 write . \u041f\u0435\u0440\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u0434\u0440\u0443\u0433\u0438\u0445 \u044e\u0437\u0435\u0440\u043e\u0432 (\u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430), \u0430 \u0442\u0430\u043a\u0436\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0443, \u0435\u0441\u043b\u0438 \u0441\u0435\u0440\u0432\u0435\u0440 \u0432\u044b\u0441\u043b\u0430\u043b \u043a\u043b\u044e\u0447\u0435\u0432\u043e\u0435 \u0441\u043b\u043e\u0432\u043e END . \u0412\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u0441\u044b\u043b\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u2014 \u043a\u0442\u043e \u0438 \u0447\u0442\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u043b \u0432 \u0447\u0430\u0442. \u0423 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0435\u0441\u0442\u044c \u0434\u0432\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438: broadcast \u0438 handle . \u041f\u0435\u0440\u0432\u0430\u044f \u0440\u0430\u0441\u0441\u044b\u043b\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c, \u043a\u0440\u043e\u043c\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f. \u0412\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0438 \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043a\u043b\u044e\u0447\u0435\u0432\u043e\u0435 \u0441\u043b\u043e\u0432\u043e EXIT , \u0442\u043e \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. client.py import socket , threading , os , time def receive (): try : while alive : message = sock . recv ( 1024 ) . decode () if message == \"NICKNAME\" : sock . send ( nickname . encode ()) elif message == \"END\" : print ( \" \\n The chat is closed\" ) os . _exit ( 1 ) else : print ( message ) except KeyboardInterrupt : return def write (): try : while alive : message = \" {} : {} \" . format ( nickname , input ( \"\" )) sock . send ( message . encode ()) except KeyboardInterrupt : return def kill_session (): sock . send ( \"EXIT\" . encode ()) sock . close () def main (): receive_thread = threading . Thread ( target = receive ) receive_thread . start () write_thread = threading . Thread ( target = write ) write_thread . start () data = sock . recv ( 1024 ) print ( data . decode ()) while True : pass if __name__ == \"__main__\" : alive = True sock = socket . socket ( family = socket . AF_INET , type = socket . SOCK_STREAM ) sock . connect (( \"localhost\" , 9094 )) nickname = input ( \"Username: \" ) try : main () except KeyboardInterrupt : alive = False sock . send ( \"EXIT\" . encode ()) print ( \" \\n You left!\" ) os . _exit ( 1 ) server.py import socket , threading , os class Client : def __init__ ( self , connection , username ): self . connection = connection self . username = username def broadcast ( message , sender ): for client in clients : if client != sender : try : client . connection . send ( message ) except socket . error : client . connection . close () clients . remove ( client ) def handle ( client ): while True : message = client . connection . recv ( 1024 ) if message == b \"EXIT\" : client . connection . close () clients . remove ( client ) broadcast ( \" {} left!\" . format ( client . username ) . encode (), client ) break else : broadcast ( message , client ) def main (): while True : conn , addr = sock . accept () print ( \"Connected with {} \" . format ( str ( addr ))) conn . send ( \"NICKNAME\" . encode ()) clients . append ( Client ( conn , conn . recv ( 1024 ) . decode ())) broadcast ( \" {} joined!\" . format ( clients [ - 1 ] . username ) . encode (), conn ) thread = threading . Thread ( target = handle , args = ( clients [ - 1 ],)) thread . start () if __name__ == \"__main__\" : clients = [] sock = socket . socket () sock . bind (( \"localhost\" , 9094 )) sock . listen ( 5 ) try : main () except KeyboardInterrupt : broadcast ( b \"END\" , sock ) os . _exit ( 1 ) Task 5 \u041f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST . \u0421\u0435\u0440\u0432\u0435\u0440 \u043c\u043e\u0436\u0435\u0442: \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u0412 \u0432\u0438\u0434\u0435 POST \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, .../api?name=test&mark=5 . \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0412\u0441\u0451 \u044d\u0442\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u0433\u0434\u0435 \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 urllib.parse . \u041a\u0430\u0436\u0434\u044b\u0439 \u043f\u0440\u0435\u0434\u043c\u0435\u0442 \u2014 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043b\u0430\u0441\u0441\u0430 Subject , \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0430 \u0438 \u0441\u043f\u0438\u0441\u043a\u0430 \u043e\u0446\u0435\u043d\u043e\u043a \u043f\u043e \u043d\u0435\u043c\u0443. \u041d\u043e\u0432\u0443\u044e \u043e\u0446\u0435\u043d\u043a\u0443 \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e add_mark . server.py import socket from request import Request from response import Response from subject import Subject class MyHTTPServer : def __init__ ( self , host , port , name ): self . host = host self . port = port self . name = name self . server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . subjects = [ Subject ( \"Test Subject\" , [ 5 , 4 , 3 ])] def serve_forever ( self ): try : self . server . bind (( self . host , self . port )) self . server . listen () while True : client , address = self . server . accept () self . serve_client ( client ) except KeyboardInterrupt : self . server . close () def serve_client ( self , client ): try : data = client . recv ( 1024 ) . decode () req = self . parse_request ( data ) res = self . handle_request ( req ) self . send_response ( client , res ) except Exception as e : print ( e ) client . close () def parse_request ( self , data ): req = data . split ( \" \\r\\n \" ) method , target , ver = req [ 0 ] . split ( \" \" ) headers = self . parse_headers ( req ) return Request ( method = method , target = target , version = ver , headers = headers , data = data ) def parse_headers ( self , req ): headers = [ h for h in req [ 1 : req [ 1 :] . index ( \"\" ) + 1 ]] header_dict = {} for header in headers : key , value = header . split ( \":\" , 1 ) header_dict [ key ] = value return header_dict def handle_request ( self , req ): try : if req . method == \"GET\" and req . path == \"/\" : return self . handle_root () elif req . method == \"POST\" and req . path . startswith ( \"/api\" ): name = str ( req . query [ \"name\" ][ 0 ]) value = int ( req . query [ \"mark\" ][ 0 ]) for subject in self . subjects : if subject . name == name : subject . add_mark ( value ) return self . handle_root () self . subjects . append ( Subject ( name , [ value ])) return self . handle_root () return self . get_error ( 404 , \"Error 404: Not Found\" ) except Exception as e : print ( f \"ERROR: { e } \" ) return self . get_error ( 500 , e ) def send_response ( self , client , res ): client . sendall ( f \"HTTP/1.1 { res . status } OK \\r\\n { res . headers } \\r\\n\\r\\n { res . body } \" . encode () ) def handle_root ( self ): body = \"\"\"<!DOCTYPE html><html lang=\"en\"><head>\"\"\" body += ( \"\"\"<meta charset=\"UTF-8\"><title>Super Cool Page</title></head><body><table>\"\"\" ) body += f \"<thead><tr><th>Subject</th><th>Marks</th></tr></thead><tbody>\" for subject in self . subjects : body += f \"<tr><td> { subject . name } </td><td> { ', ' . join ( str ( x ) for x in subject . marks ) } </td></tr>\" body += \"\"\"</tbody></table>\"\"\" body += \"\"\"</body></html>\"\"\" return Response ( 200 , \"OK\" , \"Content-Type: text/html; charset=utf-8\" , body ) def get_error ( self , code , text ): return Response ( code , \"OK\" , \"Content-Type: text/html; charset=utf-8\" , text ) if __name__ == \"__main__\" : MyHTTPServer ( \"localhost\" , 9095 , \"example.com\" ) . serve_forever () request.py from urllib.parse import parse_qs , urlparse class Request : def __init__ ( self , method , target , headers , version , data ): self . method = method self . target = target self . version = version self . url = urlparse ( self . target ) self . query = parse_qs ( self . url . query ) self . path = self . url . path self . headers = headers self . data = data respose.py class Response : def __init__ ( self , status , reason , headers = None , body = None ): self . status = status self . reason = reason self . headers = headers self . body = body subject.py class Subject : def __init__ ( self , name , marks ): self . name = name self . marks = marks def add_mark ( self , mark ): self . marks . append ( mark )","title":"Lab 1"},{"location":"lab-1/#laboratory-1","text":"","title":"Laboratory 1"},{"location":"lab-1/#task-1","text":"\u041a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0438 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP . \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0441\u044b\u043b\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u2014 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u041e\u0431\u0430 \u043f\u0435\u0447\u0430\u0442\u0430\u044e\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. client.py . import socket def main (): sock = socket . socket ( family = socket . AF_INET , type = socket . SOCK_DGRAM ) serverAddressPort = ( \"localhost\" , 9091 ) sock . sendto ( str . encode ( \"Hello, server!\" ), serverAddressPort ) data , address = sock . recvfrom ( 1024 ) print ( data . decode ()) if __name__ == \"__main__\" : main () server.py import socket , sys def main (): sock = socket . socket ( family = socket . AF_INET , type = socket . SOCK_DGRAM ) sock . bind (( \"localhost\" , 9091 )) while True : data , address = sock . recvfrom ( 1024 ) print ( data . decode ()) sock . sendto ( str . encode ( \"Hello, client!\" ), address ) if __name__ == \"__main__\" : try : main () except KeyboardInterrupt : print ( \"Interrupted\" ) sys . exit ( 0 )","title":"Task 1"},{"location":"lab-1/#task-2","text":"\u041a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0438 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP . \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u043c \u0434\u0430\u043d\u043d\u044b\u043c \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u041a\u043e\u0433\u0434\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435, \u0442\u043e \u043e\u043d \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044e calc_parallelogram_area , \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0434\u0432\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430, \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. client.py import socket def main (): sock = socket . socket ( family = socket . AF_INET , type = socket . SOCK_STREAM ) sock . connect (( \"localhost\" , 9092 )) s , h = input ( \"Enter the side and height of the par-gram separated by a space: \" ) . split () sock . sendall ( str . encode ( \" \\n \" . join ([ str ( s ), str ( h )]))) data = sock . recv ( 1024 ) sock . close () print ( data . decode ()) if __name__ == \"__main__\" : main () server.py import socket , sys def calc_parallelogram_area ( side , height ): return side * height def main (): sock = socket . socket ( family = socket . AF_INET , type = socket . SOCK_STREAM ) sock . bind (( \"localhost\" , 9092 )) sock . listen ( 1 ) conn , addr = sock . accept () while True : data = conn . recv ( 1024 ) if not data : break s , h = [ int ( i ) for i in data . decode () . split ( \" \\n \" )] conn . send ( str . encode ( str ( calc_parallelogram_area ( s , h )))) conn . close () if __name__ == \"__main__\" : try : main () except KeyboardInterrupt : print ( \"Interrupted\" ) sys . exit ( 0 )","title":"Task 2"},{"location":"lab-1/#task-3","text":"\u041a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0438 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP . \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html . server.py import socket , sys def main (): sock = socket . socket ( family = socket . AF_INET , type = socket . SOCK_STREAM ) sock . bind (( \"localhost\" , 9093 )) sock . listen ( 1 ) while True : conn , addr = sock . accept () conn . recv ( 16384 ) response_type = \"HTTP/1.0 200 OK \\n \" headers = \"Content-Type: text/html \\n\\n \" file = open ( \"index.html\" , \"r\" ) body = file . read () resp = response_type + headers + body conn . send ( resp . encode ( \"utf-8\" )) file . close () conn . close () if __name__ == \"__main__\" : try : main () except KeyboardInterrupt : print ( \"Interrupted\" ) sys . exit ( 0 )","title":"Task 3"},{"location":"lab-1/#task-4","text":"\u041c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u043d\u0430 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0435 TCP \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 threading . \u041b\u043e\u0433\u0438\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u044b: \u041a\u043e\u0433\u0434\u0430 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0442\u043e \u043e\u043d \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\u043c\u0438 \u043a\u043b\u0430\u0441\u0441\u0430 Client , \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0435\u0433\u043e \u0438\u043c\u0435\u043d\u0438; \u041f\u0440\u0438 \u043f\u0435\u0440\u0432\u043e\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0443\u0441\u043b\u043e\u0432\u043d\u044b\u0439 NICKNAME \u0438 \u0436\u0434\u0451\u0442 \u043e\u0442 \u043d\u0435\u0433\u043e \u043e\u0442\u0432\u0435\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0435\u0433\u043e \u0438\u043c\u0435\u043d\u0435\u043c; \u041a\u0430\u043a \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 NICKNAME , \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0437\u0430\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u0432 \u0441\u043f\u0438\u0441\u043e\u043a. \u0421\u0430\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0434\u0432\u0430 \u0442\u0440\u0435\u0434\u0430: receive \u0438 write . \u041f\u0435\u0440\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u0434\u0440\u0443\u0433\u0438\u0445 \u044e\u0437\u0435\u0440\u043e\u0432 (\u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430), \u0430 \u0442\u0430\u043a\u0436\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0443, \u0435\u0441\u043b\u0438 \u0441\u0435\u0440\u0432\u0435\u0440 \u0432\u044b\u0441\u043b\u0430\u043b \u043a\u043b\u044e\u0447\u0435\u0432\u043e\u0435 \u0441\u043b\u043e\u0432\u043e END . \u0412\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u0441\u044b\u043b\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u2014 \u043a\u0442\u043e \u0438 \u0447\u0442\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u043b \u0432 \u0447\u0430\u0442. \u0423 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0435\u0441\u0442\u044c \u0434\u0432\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438: broadcast \u0438 handle . \u041f\u0435\u0440\u0432\u0430\u044f \u0440\u0430\u0441\u0441\u044b\u043b\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c, \u043a\u0440\u043e\u043c\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f. \u0412\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0438 \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043a\u043b\u044e\u0447\u0435\u0432\u043e\u0435 \u0441\u043b\u043e\u0432\u043e EXIT , \u0442\u043e \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. client.py import socket , threading , os , time def receive (): try : while alive : message = sock . recv ( 1024 ) . decode () if message == \"NICKNAME\" : sock . send ( nickname . encode ()) elif message == \"END\" : print ( \" \\n The chat is closed\" ) os . _exit ( 1 ) else : print ( message ) except KeyboardInterrupt : return def write (): try : while alive : message = \" {} : {} \" . format ( nickname , input ( \"\" )) sock . send ( message . encode ()) except KeyboardInterrupt : return def kill_session (): sock . send ( \"EXIT\" . encode ()) sock . close () def main (): receive_thread = threading . Thread ( target = receive ) receive_thread . start () write_thread = threading . Thread ( target = write ) write_thread . start () data = sock . recv ( 1024 ) print ( data . decode ()) while True : pass if __name__ == \"__main__\" : alive = True sock = socket . socket ( family = socket . AF_INET , type = socket . SOCK_STREAM ) sock . connect (( \"localhost\" , 9094 )) nickname = input ( \"Username: \" ) try : main () except KeyboardInterrupt : alive = False sock . send ( \"EXIT\" . encode ()) print ( \" \\n You left!\" ) os . _exit ( 1 ) server.py import socket , threading , os class Client : def __init__ ( self , connection , username ): self . connection = connection self . username = username def broadcast ( message , sender ): for client in clients : if client != sender : try : client . connection . send ( message ) except socket . error : client . connection . close () clients . remove ( client ) def handle ( client ): while True : message = client . connection . recv ( 1024 ) if message == b \"EXIT\" : client . connection . close () clients . remove ( client ) broadcast ( \" {} left!\" . format ( client . username ) . encode (), client ) break else : broadcast ( message , client ) def main (): while True : conn , addr = sock . accept () print ( \"Connected with {} \" . format ( str ( addr ))) conn . send ( \"NICKNAME\" . encode ()) clients . append ( Client ( conn , conn . recv ( 1024 ) . decode ())) broadcast ( \" {} joined!\" . format ( clients [ - 1 ] . username ) . encode (), conn ) thread = threading . Thread ( target = handle , args = ( clients [ - 1 ],)) thread . start () if __name__ == \"__main__\" : clients = [] sock = socket . socket () sock . bind (( \"localhost\" , 9094 )) sock . listen ( 5 ) try : main () except KeyboardInterrupt : broadcast ( b \"END\" , sock ) os . _exit ( 1 )","title":"Task 4"},{"location":"lab-1/#task-5","text":"\u041f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST . \u0421\u0435\u0440\u0432\u0435\u0440 \u043c\u043e\u0436\u0435\u0442: \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u0412 \u0432\u0438\u0434\u0435 POST \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, .../api?name=test&mark=5 . \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0412\u0441\u0451 \u044d\u0442\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u0433\u0434\u0435 \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 urllib.parse . \u041a\u0430\u0436\u0434\u044b\u0439 \u043f\u0440\u0435\u0434\u043c\u0435\u0442 \u2014 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043b\u0430\u0441\u0441\u0430 Subject , \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0430 \u0438 \u0441\u043f\u0438\u0441\u043a\u0430 \u043e\u0446\u0435\u043d\u043e\u043a \u043f\u043e \u043d\u0435\u043c\u0443. \u041d\u043e\u0432\u0443\u044e \u043e\u0446\u0435\u043d\u043a\u0443 \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e add_mark . server.py import socket from request import Request from response import Response from subject import Subject class MyHTTPServer : def __init__ ( self , host , port , name ): self . host = host self . port = port self . name = name self . server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . subjects = [ Subject ( \"Test Subject\" , [ 5 , 4 , 3 ])] def serve_forever ( self ): try : self . server . bind (( self . host , self . port )) self . server . listen () while True : client , address = self . server . accept () self . serve_client ( client ) except KeyboardInterrupt : self . server . close () def serve_client ( self , client ): try : data = client . recv ( 1024 ) . decode () req = self . parse_request ( data ) res = self . handle_request ( req ) self . send_response ( client , res ) except Exception as e : print ( e ) client . close () def parse_request ( self , data ): req = data . split ( \" \\r\\n \" ) method , target , ver = req [ 0 ] . split ( \" \" ) headers = self . parse_headers ( req ) return Request ( method = method , target = target , version = ver , headers = headers , data = data ) def parse_headers ( self , req ): headers = [ h for h in req [ 1 : req [ 1 :] . index ( \"\" ) + 1 ]] header_dict = {} for header in headers : key , value = header . split ( \":\" , 1 ) header_dict [ key ] = value return header_dict def handle_request ( self , req ): try : if req . method == \"GET\" and req . path == \"/\" : return self . handle_root () elif req . method == \"POST\" and req . path . startswith ( \"/api\" ): name = str ( req . query [ \"name\" ][ 0 ]) value = int ( req . query [ \"mark\" ][ 0 ]) for subject in self . subjects : if subject . name == name : subject . add_mark ( value ) return self . handle_root () self . subjects . append ( Subject ( name , [ value ])) return self . handle_root () return self . get_error ( 404 , \"Error 404: Not Found\" ) except Exception as e : print ( f \"ERROR: { e } \" ) return self . get_error ( 500 , e ) def send_response ( self , client , res ): client . sendall ( f \"HTTP/1.1 { res . status } OK \\r\\n { res . headers } \\r\\n\\r\\n { res . body } \" . encode () ) def handle_root ( self ): body = \"\"\"<!DOCTYPE html><html lang=\"en\"><head>\"\"\" body += ( \"\"\"<meta charset=\"UTF-8\"><title>Super Cool Page</title></head><body><table>\"\"\" ) body += f \"<thead><tr><th>Subject</th><th>Marks</th></tr></thead><tbody>\" for subject in self . subjects : body += f \"<tr><td> { subject . name } </td><td> { ', ' . join ( str ( x ) for x in subject . marks ) } </td></tr>\" body += \"\"\"</tbody></table>\"\"\" body += \"\"\"</body></html>\"\"\" return Response ( 200 , \"OK\" , \"Content-Type: text/html; charset=utf-8\" , body ) def get_error ( self , code , text ): return Response ( code , \"OK\" , \"Content-Type: text/html; charset=utf-8\" , text ) if __name__ == \"__main__\" : MyHTTPServer ( \"localhost\" , 9095 , \"example.com\" ) . serve_forever () request.py from urllib.parse import parse_qs , urlparse class Request : def __init__ ( self , method , target , headers , version , data ): self . method = method self . target = target self . version = version self . url = urlparse ( self . target ) self . query = parse_qs ( self . url . query ) self . path = self . url . path self . headers = headers self . data = data respose.py class Response : def __init__ ( self , status , reason , headers = None , body = None ): self . status = status self . reason = reason self . headers = headers self . body = body subject.py class Subject : def __init__ ( self , name , marks ): self . name = name self . marks = marks def add_mark ( self , mark ): self . marks . append ( mark )","title":"Task 5"},{"location":"lab-2/","text":"Laboratory 2 Task \u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0435\u043b\u0435\u0439. \u0423\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f, \u0432\u043b\u0430\u0434\u0435\u043b\u0435\u0446 \u043e\u0442\u0435\u043b\u044f, \u0430\u0434\u0440\u0435\u0441, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0442\u0438\u043f\u044b \u043d\u043e\u043c\u0435\u0440\u043e\u0432, \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c, \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c, \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430. \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0438\u043c\u0435\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043d\u043e\u043c\u0435\u0440\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0438\u043c\u0435\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0441\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043e\u0442\u0435\u043b\u044c \u0438 \u0432\u044b\u0441\u0435\u043b\u0438\u0442\u044c \u0438\u0437 \u043e\u0442\u0435\u043b\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0435\u0432 \u043e\u0442\u0435\u043b\u044f \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446. Models Views Forms","title":"Lab 2"},{"location":"lab-2/#laboratory-2","text":"","title":"Laboratory 2"},{"location":"lab-2/#task","text":"\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0435\u043b\u0435\u0439. \u0423\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f, \u0432\u043b\u0430\u0434\u0435\u043b\u0435\u0446 \u043e\u0442\u0435\u043b\u044f, \u0430\u0434\u0440\u0435\u0441, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0442\u0438\u043f\u044b \u043d\u043e\u043c\u0435\u0440\u043e\u0432, \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c, \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c, \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430. \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0438\u043c\u0435\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043d\u043e\u043c\u0435\u0440\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0438\u043c\u0435\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0441\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043e\u0442\u0435\u043b\u044c \u0438 \u0432\u044b\u0441\u0435\u043b\u0438\u0442\u044c \u0438\u0437 \u043e\u0442\u0435\u043b\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0435\u0432 \u043e\u0442\u0435\u043b\u044f \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446.","title":"Task"},{"location":"lab-2/#models","text":"","title":"Models"},{"location":"lab-2/#views","text":"","title":"Views"},{"location":"lab-2/#forms","text":"","title":"Forms"}]}