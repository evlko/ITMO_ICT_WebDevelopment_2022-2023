{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web Dev Course Documentation to-do","title":"Web Dev Course Documentation"},{"location":"#web-dev-course-documentation","text":"to-do","title":"Web Dev Course Documentation"},{"location":"lab-1/","text":"Laboratory 1 Task 1 \u041a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0438 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP . \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0441\u044b\u043b\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u2014 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u041e\u0431\u0430 \u043f\u0435\u0447\u0430\u0442\u0430\u044e\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. client.py . import socket def main (): sock = socket . socket ( family = socket . AF_INET , type = socket . SOCK_DGRAM ) serverAddressPort = ( \"localhost\" , 9091 ) sock . sendto ( str . encode ( \"Hello, server!\" ), serverAddressPort ) data , address = sock . recvfrom ( 1024 ) print ( data . decode ()) if __name__ == \"__main__\" : main () server.py import socket , sys def main (): sock = socket . socket ( family = socket . AF_INET , type = socket . SOCK_DGRAM ) sock . bind (( \"localhost\" , 9091 )) while True : data , address = sock . recvfrom ( 1024 ) print ( data . decode ()) sock . sendto ( str . encode ( \"Hello, client!\" ), address ) if __name__ == \"__main__\" : try : main () except KeyboardInterrupt : print ( \"Interrupted\" ) sys . exit ( 0 ) Task 2 \u041a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0438 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP . \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u043c \u0434\u0430\u043d\u043d\u044b\u043c \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u041a\u043e\u0433\u0434\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435, \u0442\u043e \u043e\u043d \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044e calc_parallelogram_area , \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0434\u0432\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430, \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. client.py import socket def main (): sock = socket . socket ( family = socket . AF_INET , type = socket . SOCK_STREAM ) sock . connect (( \"localhost\" , 9092 )) s , h = input ( \"Enter the side and height of the par-gram separated by a space: \" ) . split () sock . sendall ( str . encode ( \" \\n \" . join ([ str ( s ), str ( h )]))) data = sock . recv ( 1024 ) sock . close () print ( data . decode ()) if __name__ == \"__main__\" : main () server.py import socket , sys def calc_parallelogram_area ( side , height ): return side * height def main (): sock = socket . socket ( family = socket . AF_INET , type = socket . SOCK_STREAM ) sock . bind (( \"localhost\" , 9092 )) sock . listen ( 1 ) conn , addr = sock . accept () while True : data = conn . recv ( 1024 ) if not data : break s , h = [ int ( i ) for i in data . decode () . split ( \" \\n \" )] conn . send ( str . encode ( str ( calc_parallelogram_area ( s , h )))) conn . close () if __name__ == \"__main__\" : try : main () except KeyboardInterrupt : print ( \"Interrupted\" ) sys . exit ( 0 ) Task 3 \u041a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0438 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP . \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html . server.py import socket , sys def main (): sock = socket . socket ( family = socket . AF_INET , type = socket . SOCK_STREAM ) sock . bind (( \"localhost\" , 9093 )) sock . listen ( 1 ) while True : conn , addr = sock . accept () conn . recv ( 16384 ) response_type = \"HTTP/1.0 200 OK \\n \" headers = \"Content-Type: text/html \\n\\n \" file = open ( \"index.html\" , \"r\" ) body = file . read () resp = response_type + headers + body conn . send ( resp . encode ( \"utf-8\" )) file . close () conn . close () if __name__ == \"__main__\" : try : main () except KeyboardInterrupt : print ( \"Interrupted\" ) sys . exit ( 0 ) Task 4 \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u043d\u0430 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0435 TCP \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 threading . \u041b\u043e\u0433\u0438\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u044b: \u041a\u043e\u0433\u0434\u0430 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0442\u043e \u043e\u043d \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\u043c\u0438 \u043a\u043b\u0430\u0441\u0441\u0430 Client , \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0435\u0433\u043e \u0438\u043c\u0435\u043d\u0438; \u041f\u0440\u0438 \u043f\u0435\u0440\u0432\u043e\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0443\u0441\u043b\u043e\u0432\u043d\u044b\u0439 NICKNAME \u0438 \u0436\u0434\u0451\u0442 \u043e\u0442 \u043d\u0435\u0433\u043e \u043e\u0442\u0432\u0435\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0435\u0433\u043e \u0438\u043c\u0435\u043d\u0435\u043c; \u041a\u0430\u043a \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 NICKNAME , \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0437\u0430\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u0432 \u0441\u043f\u0438\u0441\u043e\u043a. \u0421\u0430\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0434\u0432\u0430 \u0442\u0440\u0435\u0434\u0430: receive \u0438 write . \u041f\u0435\u0440\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u0434\u0440\u0443\u0433\u0438\u0445 \u044e\u0437\u0435\u0440\u043e\u0432 (\u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430), \u0430 \u0442\u0430\u043a\u0436\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0443, \u0435\u0441\u043b\u0438 \u0441\u0435\u0440\u0432\u0435\u0440 \u0432\u044b\u0441\u043b\u0430\u043b \u043a\u043b\u044e\u0447\u0435\u0432\u043e\u0435 \u0441\u043b\u043e\u0432\u043e END . \u0412\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u0441\u044b\u043b\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u2014 \u043a\u0442\u043e \u0438 \u0447\u0442\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u043b \u0432 \u0447\u0430\u0442. \u0423 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0435\u0441\u0442\u044c \u0434\u0432\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438: broadcast \u0438 handle . \u041f\u0435\u0440\u0432\u0430\u044f \u0440\u0430\u0441\u0441\u044b\u043b\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c, \u043a\u0440\u043e\u043c\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f. \u0412\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0438 \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043a\u043b\u044e\u0447\u0435\u0432\u043e\u0435 \u0441\u043b\u043e\u0432\u043e EXIT , \u0442\u043e \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. client.py import socket , threading , os , time def receive (): try : while alive : message = sock . recv ( 1024 ) . decode () if message == \"NICKNAME\" : sock . send ( nickname . encode ()) elif message == \"END\" : print ( \" \\n The chat is closed\" ) os . _exit ( 1 ) else : print ( message ) except KeyboardInterrupt : return def write (): try : while alive : message = \" {} : {} \" . format ( nickname , input ( \"\" )) sock . send ( message . encode ()) except KeyboardInterrupt : return def kill_session (): sock . send ( \"EXIT\" . encode ()) sock . close () def main (): receive_thread = threading . Thread ( target = receive ) receive_thread . start () write_thread = threading . Thread ( target = write ) write_thread . start () data = sock . recv ( 1024 ) print ( data . decode ()) while True : pass if __name__ == \"__main__\" : alive = True sock = socket . socket ( family = socket . AF_INET , type = socket . SOCK_STREAM ) sock . connect (( \"localhost\" , 9094 )) nickname = input ( \"Username: \" ) try : main () except KeyboardInterrupt : alive = False sock . send ( \"EXIT\" . encode ()) print ( \" \\n You left!\" ) os . _exit ( 1 ) server.py import socket , threading , os class Client : def __init__ ( self , connection , username ): self . connection = connection self . username = username def broadcast ( message , sender ): for client in clients : if client != sender : try : client . connection . send ( message ) except socket . error : client . connection . close () clients . remove ( client ) def handle ( client ): while True : message = client . connection . recv ( 1024 ) if message == b \"EXIT\" : client . connection . close () clients . remove ( client ) broadcast ( \" {} left!\" . format ( client . username ) . encode (), client ) break else : broadcast ( message , client ) def main (): while True : conn , addr = sock . accept () print ( \"Connected with {} \" . format ( str ( addr ))) conn . send ( \"NICKNAME\" . encode ()) clients . append ( Client ( conn , conn . recv ( 1024 ) . decode ())) broadcast ( \" {} joined!\" . format ( clients [ - 1 ] . username ) . encode (), conn ) thread = threading . Thread ( target = handle , args = ( clients [ - 1 ],)) thread . start () if __name__ == \"__main__\" : clients = [] sock = socket . socket () sock . bind (( \"localhost\" , 9094 )) sock . listen ( 5 ) try : main () except KeyboardInterrupt : broadcast ( b \"END\" , sock ) os . _exit ( 1 ) Task 5 \u041f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST . \u0421\u0435\u0440\u0432\u0435\u0440 \u043c\u043e\u0436\u0435\u0442: \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u0412 \u0432\u0438\u0434\u0435 POST \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, .../api?name=test&mark=5 . \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0412\u0441\u0451 \u044d\u0442\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u0433\u0434\u0435 \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 urllib.parse . \u041a\u0430\u0436\u0434\u044b\u0439 \u043f\u0440\u0435\u0434\u043c\u0435\u0442 \u2014 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043b\u0430\u0441\u0441\u0430 Subject , \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0430 \u0438 \u0441\u043f\u0438\u0441\u043a\u0430 \u043e\u0446\u0435\u043d\u043e\u043a \u043f\u043e \u043d\u0435\u043c\u0443. \u041d\u043e\u0432\u0443\u044e \u043e\u0446\u0435\u043d\u043a\u0443 \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e add_mark . server.py import socket from request import Request from response import Response from subject import Subject class MyHTTPServer : def __init__ ( self , host , port , name ): self . host = host self . port = port self . name = name self . server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . subjects = [ Subject ( \"Test Subject\" , [ 5 , 4 , 3 ])] def serve_forever ( self ): try : self . server . bind (( self . host , self . port )) self . server . listen () while True : client , address = self . server . accept () self . serve_client ( client ) except KeyboardInterrupt : self . server . close () def serve_client ( self , client ): try : data = client . recv ( 1024 ) . decode () req = self . parse_request ( data ) res = self . handle_request ( req ) self . send_response ( client , res ) except Exception as e : print ( e ) client . close () def parse_request ( self , data ): req = data . split ( \" \\r\\n \" ) method , target , ver = req [ 0 ] . split ( \" \" ) headers = self . parse_headers ( req ) return Request ( method = method , target = target , version = ver , headers = headers , data = data ) def parse_headers ( self , req ): headers = [ h for h in req [ 1 : req [ 1 :] . index ( \"\" ) + 1 ]] header_dict = {} for header in headers : key , value = header . split ( \":\" , 1 ) header_dict [ key ] = value return header_dict def handle_request ( self , req ): try : if req . method == \"GET\" and req . path == \"/\" : return self . handle_root () elif req . method == \"POST\" and req . path . startswith ( \"/api\" ): name = str ( req . query [ \"name\" ][ 0 ]) value = int ( req . query [ \"mark\" ][ 0 ]) for subject in self . subjects : if subject . name == name : subject . add_mark ( value ) return self . handle_root () self . subjects . append ( Subject ( name , [ value ])) return self . handle_root () return self . get_error ( 404 , \"Error 404: Not Found\" ) except Exception as e : print ( f \"ERROR: { e } \" ) return self . get_error ( 500 , e ) def send_response ( self , client , res ): client . sendall ( f \"HTTP/1.1 { res . status } OK \\r\\n { res . headers } \\r\\n\\r\\n { res . body } \" . encode () ) def handle_root ( self ): body = \"\"\"<!DOCTYPE html><html lang=\"en\"><head>\"\"\" body += ( \"\"\"<meta charset=\"UTF-8\"><title>Super Cool Page</title></head><body><table>\"\"\" ) body += f \"<thead><tr><th>Subject</th><th>Marks</th></tr></thead><tbody>\" for subject in self . subjects : body += f \"<tr><td> { subject . name } </td><td> { ', ' . join ( str ( x ) for x in subject . marks ) } </td></tr>\" body += \"\"\"</tbody></table>\"\"\" body += \"\"\"</body></html>\"\"\" return Response ( 200 , \"OK\" , \"Content-Type: text/html; charset=utf-8\" , body ) def get_error ( self , code , text ): return Response ( code , \"OK\" , \"Content-Type: text/html; charset=utf-8\" , text ) if __name__ == \"__main__\" : MyHTTPServer ( \"localhost\" , 9095 , \"example.com\" ) . serve_forever () request.py from urllib.parse import parse_qs , urlparse class Request : def __init__ ( self , method , target , headers , version , data ): self . method = method self . target = target self . version = version self . url = urlparse ( self . target ) self . query = parse_qs ( self . url . query ) self . path = self . url . path self . headers = headers self . data = data respose.py class Response : def __init__ ( self , status , reason , headers = None , body = None ): self . status = status self . reason = reason self . headers = headers self . body = body subject.py class Subject : def __init__ ( self , name , marks ): self . name = name self . marks = marks def add_mark ( self , mark ): self . marks . append ( mark )","title":"Lab 1"},{"location":"lab-1/#laboratory-1","text":"","title":"Laboratory 1"},{"location":"lab-1/#task-1","text":"\u041a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0438 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP . \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0441\u044b\u043b\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u2014 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u041e\u0431\u0430 \u043f\u0435\u0447\u0430\u0442\u0430\u044e\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. client.py . import socket def main (): sock = socket . socket ( family = socket . AF_INET , type = socket . SOCK_DGRAM ) serverAddressPort = ( \"localhost\" , 9091 ) sock . sendto ( str . encode ( \"Hello, server!\" ), serverAddressPort ) data , address = sock . recvfrom ( 1024 ) print ( data . decode ()) if __name__ == \"__main__\" : main () server.py import socket , sys def main (): sock = socket . socket ( family = socket . AF_INET , type = socket . SOCK_DGRAM ) sock . bind (( \"localhost\" , 9091 )) while True : data , address = sock . recvfrom ( 1024 ) print ( data . decode ()) sock . sendto ( str . encode ( \"Hello, client!\" ), address ) if __name__ == \"__main__\" : try : main () except KeyboardInterrupt : print ( \"Interrupted\" ) sys . exit ( 0 )","title":"Task 1"},{"location":"lab-1/#task-2","text":"\u041a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0438 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP . \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u043c \u0434\u0430\u043d\u043d\u044b\u043c \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u041a\u043e\u0433\u0434\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435, \u0442\u043e \u043e\u043d \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044e calc_parallelogram_area , \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0434\u0432\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430, \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. client.py import socket def main (): sock = socket . socket ( family = socket . AF_INET , type = socket . SOCK_STREAM ) sock . connect (( \"localhost\" , 9092 )) s , h = input ( \"Enter the side and height of the par-gram separated by a space: \" ) . split () sock . sendall ( str . encode ( \" \\n \" . join ([ str ( s ), str ( h )]))) data = sock . recv ( 1024 ) sock . close () print ( data . decode ()) if __name__ == \"__main__\" : main () server.py import socket , sys def calc_parallelogram_area ( side , height ): return side * height def main (): sock = socket . socket ( family = socket . AF_INET , type = socket . SOCK_STREAM ) sock . bind (( \"localhost\" , 9092 )) sock . listen ( 1 ) conn , addr = sock . accept () while True : data = conn . recv ( 1024 ) if not data : break s , h = [ int ( i ) for i in data . decode () . split ( \" \\n \" )] conn . send ( str . encode ( str ( calc_parallelogram_area ( s , h )))) conn . close () if __name__ == \"__main__\" : try : main () except KeyboardInterrupt : print ( \"Interrupted\" ) sys . exit ( 0 )","title":"Task 2"},{"location":"lab-1/#task-3","text":"\u041a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0438 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP . \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html . server.py import socket , sys def main (): sock = socket . socket ( family = socket . AF_INET , type = socket . SOCK_STREAM ) sock . bind (( \"localhost\" , 9093 )) sock . listen ( 1 ) while True : conn , addr = sock . accept () conn . recv ( 16384 ) response_type = \"HTTP/1.0 200 OK \\n \" headers = \"Content-Type: text/html \\n\\n \" file = open ( \"index.html\" , \"r\" ) body = file . read () resp = response_type + headers + body conn . send ( resp . encode ( \"utf-8\" )) file . close () conn . close () if __name__ == \"__main__\" : try : main () except KeyboardInterrupt : print ( \"Interrupted\" ) sys . exit ( 0 )","title":"Task 3"},{"location":"lab-1/#task-4","text":"\u041c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u043d\u0430 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0435 TCP \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 threading . \u041b\u043e\u0433\u0438\u043a\u0430 \u0440\u0430\u0431\u043e\u0442\u044b: \u041a\u043e\u0433\u0434\u0430 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0442\u043e \u043e\u043d \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430\u043c\u0438 \u043a\u043b\u0430\u0441\u0441\u0430 Client , \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0435\u0433\u043e \u0438\u043c\u0435\u043d\u0438; \u041f\u0440\u0438 \u043f\u0435\u0440\u0432\u043e\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0443\u0441\u043b\u043e\u0432\u043d\u044b\u0439 NICKNAME \u0438 \u0436\u0434\u0451\u0442 \u043e\u0442 \u043d\u0435\u0433\u043e \u043e\u0442\u0432\u0435\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0435\u0433\u043e \u0438\u043c\u0435\u043d\u0435\u043c; \u041a\u0430\u043a \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 NICKNAME , \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0437\u0430\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u0432 \u0441\u043f\u0438\u0441\u043e\u043a. \u0421\u0430\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0434\u0432\u0430 \u0442\u0440\u0435\u0434\u0430: receive \u0438 write . \u041f\u0435\u0440\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u0434\u0440\u0443\u0433\u0438\u0445 \u044e\u0437\u0435\u0440\u043e\u0432 (\u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430), \u0430 \u0442\u0430\u043a\u0436\u0435 \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0443, \u0435\u0441\u043b\u0438 \u0441\u0435\u0440\u0432\u0435\u0440 \u0432\u044b\u0441\u043b\u0430\u043b \u043a\u043b\u044e\u0447\u0435\u0432\u043e\u0435 \u0441\u043b\u043e\u0432\u043e END . \u0412\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u0441\u044b\u043b\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u2014 \u043a\u0442\u043e \u0438 \u0447\u0442\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u043b \u0432 \u0447\u0430\u0442. \u0423 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0435\u0441\u0442\u044c \u0434\u0432\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438: broadcast \u0438 handle . \u041f\u0435\u0440\u0432\u0430\u044f \u0440\u0430\u0441\u0441\u044b\u043b\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c, \u043a\u0440\u043e\u043c\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f. \u0412\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0441\u0442\u0430\u0442\u0443\u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0438 \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043a\u043b\u044e\u0447\u0435\u0432\u043e\u0435 \u0441\u043b\u043e\u0432\u043e EXIT , \u0442\u043e \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. client.py import socket , threading , os , time def receive (): try : while alive : message = sock . recv ( 1024 ) . decode () if message == \"NICKNAME\" : sock . send ( nickname . encode ()) elif message == \"END\" : print ( \" \\n The chat is closed\" ) os . _exit ( 1 ) else : print ( message ) except KeyboardInterrupt : return def write (): try : while alive : message = \" {} : {} \" . format ( nickname , input ( \"\" )) sock . send ( message . encode ()) except KeyboardInterrupt : return def kill_session (): sock . send ( \"EXIT\" . encode ()) sock . close () def main (): receive_thread = threading . Thread ( target = receive ) receive_thread . start () write_thread = threading . Thread ( target = write ) write_thread . start () data = sock . recv ( 1024 ) print ( data . decode ()) while True : pass if __name__ == \"__main__\" : alive = True sock = socket . socket ( family = socket . AF_INET , type = socket . SOCK_STREAM ) sock . connect (( \"localhost\" , 9094 )) nickname = input ( \"Username: \" ) try : main () except KeyboardInterrupt : alive = False sock . send ( \"EXIT\" . encode ()) print ( \" \\n You left!\" ) os . _exit ( 1 ) server.py import socket , threading , os class Client : def __init__ ( self , connection , username ): self . connection = connection self . username = username def broadcast ( message , sender ): for client in clients : if client != sender : try : client . connection . send ( message ) except socket . error : client . connection . close () clients . remove ( client ) def handle ( client ): while True : message = client . connection . recv ( 1024 ) if message == b \"EXIT\" : client . connection . close () clients . remove ( client ) broadcast ( \" {} left!\" . format ( client . username ) . encode (), client ) break else : broadcast ( message , client ) def main (): while True : conn , addr = sock . accept () print ( \"Connected with {} \" . format ( str ( addr ))) conn . send ( \"NICKNAME\" . encode ()) clients . append ( Client ( conn , conn . recv ( 1024 ) . decode ())) broadcast ( \" {} joined!\" . format ( clients [ - 1 ] . username ) . encode (), conn ) thread = threading . Thread ( target = handle , args = ( clients [ - 1 ],)) thread . start () if __name__ == \"__main__\" : clients = [] sock = socket . socket () sock . bind (( \"localhost\" , 9094 )) sock . listen ( 5 ) try : main () except KeyboardInterrupt : broadcast ( b \"END\" , sock ) os . _exit ( 1 )","title":"Task 4"},{"location":"lab-1/#task-5","text":"\u041f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST . \u0421\u0435\u0440\u0432\u0435\u0440 \u043c\u043e\u0436\u0435\u0442: \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u0412 \u0432\u0438\u0434\u0435 POST \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, .../api?name=test&mark=5 . \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0412\u0441\u0451 \u044d\u0442\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u0433\u0434\u0435 \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 urllib.parse . \u041a\u0430\u0436\u0434\u044b\u0439 \u043f\u0440\u0435\u0434\u043c\u0435\u0442 \u2014 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043b\u0430\u0441\u0441\u0430 Subject , \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0430 \u0438 \u0441\u043f\u0438\u0441\u043a\u0430 \u043e\u0446\u0435\u043d\u043e\u043a \u043f\u043e \u043d\u0435\u043c\u0443. \u041d\u043e\u0432\u0443\u044e \u043e\u0446\u0435\u043d\u043a\u0443 \u043c\u043e\u0436\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e add_mark . server.py import socket from request import Request from response import Response from subject import Subject class MyHTTPServer : def __init__ ( self , host , port , name ): self . host = host self . port = port self . name = name self . server = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . subjects = [ Subject ( \"Test Subject\" , [ 5 , 4 , 3 ])] def serve_forever ( self ): try : self . server . bind (( self . host , self . port )) self . server . listen () while True : client , address = self . server . accept () self . serve_client ( client ) except KeyboardInterrupt : self . server . close () def serve_client ( self , client ): try : data = client . recv ( 1024 ) . decode () req = self . parse_request ( data ) res = self . handle_request ( req ) self . send_response ( client , res ) except Exception as e : print ( e ) client . close () def parse_request ( self , data ): req = data . split ( \" \\r\\n \" ) method , target , ver = req [ 0 ] . split ( \" \" ) headers = self . parse_headers ( req ) return Request ( method = method , target = target , version = ver , headers = headers , data = data ) def parse_headers ( self , req ): headers = [ h for h in req [ 1 : req [ 1 :] . index ( \"\" ) + 1 ]] header_dict = {} for header in headers : key , value = header . split ( \":\" , 1 ) header_dict [ key ] = value return header_dict def handle_request ( self , req ): try : if req . method == \"GET\" and req . path == \"/\" : return self . handle_root () elif req . method == \"POST\" and req . path . startswith ( \"/api\" ): name = str ( req . query [ \"name\" ][ 0 ]) value = int ( req . query [ \"mark\" ][ 0 ]) for subject in self . subjects : if subject . name == name : subject . add_mark ( value ) return self . handle_root () self . subjects . append ( Subject ( name , [ value ])) return self . handle_root () return self . get_error ( 404 , \"Error 404: Not Found\" ) except Exception as e : print ( f \"ERROR: { e } \" ) return self . get_error ( 500 , e ) def send_response ( self , client , res ): client . sendall ( f \"HTTP/1.1 { res . status } OK \\r\\n { res . headers } \\r\\n\\r\\n { res . body } \" . encode () ) def handle_root ( self ): body = \"\"\"<!DOCTYPE html><html lang=\"en\"><head>\"\"\" body += ( \"\"\"<meta charset=\"UTF-8\"><title>Super Cool Page</title></head><body><table>\"\"\" ) body += f \"<thead><tr><th>Subject</th><th>Marks</th></tr></thead><tbody>\" for subject in self . subjects : body += f \"<tr><td> { subject . name } </td><td> { ', ' . join ( str ( x ) for x in subject . marks ) } </td></tr>\" body += \"\"\"</tbody></table>\"\"\" body += \"\"\"</body></html>\"\"\" return Response ( 200 , \"OK\" , \"Content-Type: text/html; charset=utf-8\" , body ) def get_error ( self , code , text ): return Response ( code , \"OK\" , \"Content-Type: text/html; charset=utf-8\" , text ) if __name__ == \"__main__\" : MyHTTPServer ( \"localhost\" , 9095 , \"example.com\" ) . serve_forever () request.py from urllib.parse import parse_qs , urlparse class Request : def __init__ ( self , method , target , headers , version , data ): self . method = method self . target = target self . version = version self . url = urlparse ( self . target ) self . query = parse_qs ( self . url . query ) self . path = self . url . path self . headers = headers self . data = data respose.py class Response : def __init__ ( self , status , reason , headers = None , body = None ): self . status = status self . reason = reason self . headers = headers self . body = body subject.py class Subject : def __init__ ( self , name , marks ): self . name = name self . marks = marks def add_mark ( self , mark ): self . marks . append ( mark )","title":"Task 5"},{"location":"lab-2/","text":"Laboratory 2 Task \u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0435\u043b\u0435\u0439. \u0423\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f, \u0432\u043b\u0430\u0434\u0435\u043b\u0435\u0446 \u043e\u0442\u0435\u043b\u044f, \u0430\u0434\u0440\u0435\u0441, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0442\u0438\u043f\u044b \u043d\u043e\u043c\u0435\u0440\u043e\u0432, \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c, \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c, \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430. \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0438\u043c\u0435\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043d\u043e\u043c\u0435\u0440\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0438\u043c\u0435\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0441\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043e\u0442\u0435\u043b\u044c \u0438 \u0432\u044b\u0441\u0435\u043b\u0438\u0442\u044c \u0438\u0437 \u043e\u0442\u0435\u043b\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0435\u0432 \u043e\u0442\u0435\u043b\u044f \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446. Models models.py \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041c\u043e\u0434\u0435\u043b\u044c \u043e\u0442\u0435\u043b\u044f class Hotel ( models . Model ): name = models . CharField ( max_length = 63 ) owner = models . CharField ( max_length = 255 ) address = models . CharField ( max_length = 255 ) description = models . CharField ( max_length = 255 ) \u0412\u0441\u0435 \u043f\u043e\u043b\u044f \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c, \u043e\u0442\u0440\u0430\u0436\u0430\u044e\u0442: \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f; \u0415\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430; \u0410\u0434\u0440\u0435\u0441; \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435. \u041c\u043e\u0434\u0435\u043b\u044c \u043a\u043e\u043c\u043d\u0430\u0442\u044b class Room ( models . Model ): number = models . IntegerField () hotel = models . ForeignKey ( Hotel , on_delete = models . CASCADE ) type = models . CharField ( max_length = 127 ) cost = models . PositiveIntegerField () beds = models . PositiveSmallIntegerField () amenities = models . CharField ( max_length = 255 , blank = True , null = True ) \u041f\u043e\u043b\u044f: \u041d\u043e\u043c\u0435\u0440 \u043a\u043e\u043c\u043d\u0430\u0442\u044b; \u041e\u0442\u0435\u043b\u044c, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043a\u043e\u043c\u043d\u0430\u0442\u0430 (\u0432\u043d. \u043a\u043b\u044e\u0447 \u043d\u0430 \u043e\u0442\u0435\u043b\u044c); \u0422\u0438\u043f \u043a\u043e\u043c\u043d\u0430\u0442\u044b; \u0426\u0435\u043d\u0430 \u0437\u0430 \u043d\u043e\u0447\u044c; \u041a\u043e\u043b-\u0432\u043e \u043c\u0435\u0441\u0442; \u0423\u0434\u043e\u0431\u0441\u0442\u0432\u0430 (\u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u043f\u043e\u043b\u0435). \u041c\u043e\u0434\u0435\u043b\u044c \u0431\u0440\u043e\u043d\u0438 class Booking ( models . Model ): reservee = models . ForeignKey ( User , on_delete = models . CASCADE ) reservation = models . ForeignKey ( Room , on_delete = models . CASCADE ) date_start = models . DateField () date_end = models . DateField () approved = models . BooleanField ( default = False ) \u041f\u043e\u043b\u044f: \u0413\u043e\u0441\u0442\u044c (\u0432\u043d. \u043a\u043b\u044e\u0447 \u043d\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f); \u041d\u043e\u043c\u0435\u0440 (\u0432\u043d. \u043a\u043b\u044e\u0447 \u043d\u0430 \u043a\u043e\u043c\u043d\u0430\u0442\u0443); \u041d\u0430\u0447\u0430\u043b\u043e \u0438 \u043a\u043e\u043d\u0435\u0446 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f; \u0421\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u043e \u0438\u043b\u0438 \u043d\u0435\u0442 (\u0440\u0435\u0448\u0430\u0435\u0442 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0432 \u043f\u0430\u043d\u0435\u043b\u0438). \u041c\u043e\u0434\u0435\u043b\u044c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u044b class Review ( models . Model ): booking = models . ForeignKey ( Booking , on_delete = models . CASCADE ) text = models . TextField () rating = models . PositiveSmallIntegerField ( validators = [ MaxValueValidator ( 10 ), MinValueValidator ( 1 ) ] ) \u041f\u043e\u043b\u044f: \u0411\u0440\u043e\u043d\u044c (\u0432\u043d. \u043a\u043b\u044e\u0447 \u043d\u0430 \u0431\u0440\u043e\u043d\u044c); \u0422\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f; \u0420\u0435\u0439\u0442\u0438\u043d\u0433 (\u043e\u0442 1 \u0434\u043e 10 \u0447\u0435\u0440\u0435\u0437 \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u044b.). NB: \u0447\u0435\u0440\u0435\u0437 \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u043a\u043b\u044e\u0447 \u0431\u0440\u043e\u043d\u0438 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u0441\u044e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0443\u044e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e: \u0410\u0432\u0442\u043e\u0440\u0430; \u0412\u0440\u0435\u043c\u044f \u0431\u0440\u043e\u043d\u0438. Views views.py \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f. \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0442\u0435\u043b\u044f \u0412\u0441\u0435 \u043e\u0442\u0435\u043b\u0438: class HotelListView ( ListView ): model = Hotel \u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043e\u0442\u0435\u043b\u044c: class HotelDetailView ( DetailView ): model = Hotel def get_context_data ( self , ** kwargs ): context = super () . get_context_data ( ** kwargs ) context [ \"rooms\" ] = Room . objects . filter ( hotel = self . object . id ) room_ids = [ room [ \"id\" ] for room in context [ \"rooms\" ] . values ()] delta = timedelta ( days = 30 ) context [ \"bookings\" ] = Booking . objects . filter ( reservation__in = room_ids , date_end__gte = ( datetime . today () - delta )) context [ \"reservees\" ] = User . objects . filter ( id__in = set ( [ booking [ \"reservee_id\" ] for booking in context [ \"bookings\" ] . values ()])) return context \u0424\u0443\u043d\u043a\u0446\u0438\u044f get_context_data \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430: \u0412\u0441\u0435 \u043a\u043e\u043c\u043d\u0430\u0442\u044b, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043a\u043b\u044e\u0447 \u043d\u0430 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0439 \u043e\u0442\u0435\u043b\u044c; \u0421\u043f\u0438\u0441\u043a\u043e\u043c \u0433\u043e\u0441\u0442\u0435\u0439 \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 30 \u0434\u043d\u0435\u0439. \u0421\u043f\u0438\u0441\u043e\u043a \u0433\u043e\u0441\u0442\u0435\u0439 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u0438\u0449\u0443\u0442 \u0432\u0441\u0435 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 30 \u0434\u043d\u0435\u0439, \u0430 \u0432 \u043d\u0438\u0445 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0433\u043e\u0441\u0442\u0435\u0439. \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u043d\u0430\u0442\u044b \u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u0430\u044f \u043a\u043e\u043c\u043d\u0430\u0442\u0430: class RoomDetailView ( DetailView ): model = Room def get_context_data ( self , ** kwargs ): context = super () . get_context_data ( ** kwargs ) user = self . request . user bookings = Booking . objects . filter ( reservation = self . object . id ) booking_ids = [ booking [ 'id' ] for booking in bookings . values ()] reviews = Review . objects . filter ( booking__in = booking_ids ) reviews_by_user = 0 for review in reviews : if review . booking . reservee == user : reviews_by_user += 1 for booking in bookings : if booking . reservee == user : reviews_by_user -= 1 review_form = ReviewForm () if reviews_by_user == 0 : review_form = None booking_form = BookingForm () context [ \"reviews\" ] = reviews context [ \"review_form\" ] = review_form context [ \"booking_form\" ] = booking_form return context def post ( self , request , * args , ** kwargs ): user = request . user room = self . get_object () if 'review_post' in self . request . POST : review_form = ReviewForm ( self . request . POST ) if review_form . is_valid (): review_form = review_form . save ( commit = False ) review_form . booking = Booking . objects . filter ( reservation = room . id , reservee = user ) . last () review_form . save () elif 'booking_post' in self . request . POST : booking_form = BookingForm ( self . request . POST ) if booking_form . is_valid (): booking_form = booking_form . save ( commit = False ) booking_form . reservee = user booking_form . reservation = room booking_form . save () return HttpResponseRedirect ( reverse ( 'bookings' )) return HttpResponseRedirect ( reverse ( 'get_room' , args = ( self . kwargs [ 'hotel_id' ], room . id ,))) \u0424\u0443\u043d\u043a\u0446\u0438\u044f get_context_data \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0432 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442: \u0412\u0441\u0435 \u043e\u0431\u0437\u043e\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u043b\u0438\u0441\u044c \u043d\u0430 \u0431\u0440\u043e\u043d\u044c \u0434\u0430\u043d\u043d\u043e\u0439 \u043a\u043e\u043c\u043d\u0430\u0442\u044b; \u0424\u043e\u0440\u043c\u0430 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f; \u0424\u043e\u0440\u043c\u0430 \u043e\u0442\u0437\u044b\u0432\u0430, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043b \u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u0447\u0438\u0441\u043b\u043e \u0440\u0430\u0437, \u0447\u0435\u043c \u0443\u0436\u0435 \u043e\u0441\u0442\u0430\u0432\u0438\u043b \u043e\u0442\u0437\u044b\u0432\u043e\u0432. \u0424\u0443\u043d\u043a\u0446\u0438\u044f post \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0444\u043e\u0440\u043c\u044b, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441\u0434\u0435\u043b\u0430\u043b \u0431\u0440\u043e\u043d\u044c, \u0442\u043e \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0435\u0433\u043e \u043a \u0441\u0432\u043e\u0438\u043c \u0431\u0440\u043e\u043d\u044f\u043c. \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0431\u0440\u043e\u043d\u0438 \u0412\u0441\u0435 \u0431\u0440\u043e\u043d\u0438 \u0433\u043e\u0441\u0442\u044f: class BookingListView ( ListView ): model = Booking def get_queryset ( self ): return self . model . objects . filter ( reservee = self . request . user ) \u0424\u043e\u0440\u043c\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0431\u0440\u043e\u043d\u0438: class BookingDeleteView ( DeleteView ): model = Booking success_url = '/bookings/' def get_context_data ( self , ** kwargs ): context = super () . get_context_data ( ** kwargs ) user = self . request . user context [ \"valid_user\" ] = True if self . object . reservee == user else False return context \u0424\u043e\u0440\u043c\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0431\u0440\u043e\u043d\u0438: class BookingUpdateView ( UpdateView ): model = Booking fields = [ 'date_start' , 'date_end' ] success_url = '/bookings/' def get_context_data ( self , ** kwargs ): context = super () . get_context_data ( ** kwargs ) user = self . request . user context [ \"valid_user\" ] = True if self . object . reservee == user else False return context NB: \u0443 \u043e\u0431\u0435\u0438\u0445 \u0444\u043e\u0440\u043c \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u043d\u0438\u043a\u0442\u043e \u043a\u0440\u043e\u043c\u0435 \u0433\u043e\u0441\u0442\u044f (\u0438 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430) \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a \u043d\u0435\u0439 \u0434\u043e\u0441\u0442\u0443\u043f. Templates \u0412 hotels_app/templates \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f \u0448\u0430\u0431\u043b\u043e\u043d\u044b \u043f\u043e\u0434 \u043a\u0430\u0436\u0434\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435. Forms forms.py \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435 \u0444\u043e\u0440\u043c\u044b. \u0424\u043e\u0440\u043c\u0430 \u043e\u0431\u0437\u043e\u0440\u0430 class ReviewForm ( ModelForm ): class Meta : model = Review fields = [ 'text' , 'rating' ] \u0424\u043e\u0440\u043c\u0430 \u0431\u0440\u043e\u043d\u0438 class BookingForm ( ModelForm ): class Meta : model = Booking fields = [ 'date_start' , 'date_end' ] def clean ( self ): cleaned_data = super () . clean () start_date = cleaned_data . get ( \"date_start\" ) end_date = cleaned_data . get ( \"date_end\" ) if end_date < start_date : raise ValidationError ( \"End date should be greater than start date.\" ) \u0415\u0441\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0434\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0431\u0440\u043e\u043d\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0434\u043e \u043a\u043e\u043d\u0446\u0430. URLs Project path ( \"admin/\" , admin . site . urls ), path ( 'accounts/' , include ( 'allauth.urls' )), path ( \"\" , include ( \"hotels_app.urls\" )), \u0415\u0441\u0442\u044c \u0442\u0440\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430: 1. \u0410\u0434\u043c\u0438\u043d\u043a\u0430; 2. \u0410\u043a\u043a\u0430\u0443\u043d\u0442\u044b ( django-allauth ); 3. \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 ( hotels_app ). Apps \u041f\u0443\u0442\u0438 \u0434\u043e \u043e\u0442\u0435\u043b\u044f \u0438 \u043a\u043e\u043c\u043d\u0430\u0442: path ( 'hotel/list/' , HotelListView . as_view ()), path ( 'hotel/<int:pk>/' , HotelDetailView . as_view ()), path ( 'hotel/<hotel_id>/<int:pk>/' , RoomDetailView . as_view (), name = \"get_room\" ), \u041f\u0443\u0442\u0438 \u0434\u043e \u0431\u0440\u043e\u043d\u044c: path ( 'bookings/' , login_required ( BookingListView . as_view ()), name = \"bookings\" ), path ( 'bookings/<int:pk>/delete/' , login_required ( BookingDeleteView . as_view ())), path ( 'bookings/<int:pk>/update/' , login_required ( BookingUpdateView . as_view ())), \u0412\u0441\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f class based , \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434 as_view() ; \u0423 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043b\u043e\u0433\u0438\u043d login_required() . Examples","title":"Lab 2"},{"location":"lab-2/#laboratory-2","text":"","title":"Laboratory 2"},{"location":"lab-2/#task","text":"\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0435\u043b\u0435\u0439. \u0423\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f, \u0432\u043b\u0430\u0434\u0435\u043b\u0435\u0446 \u043e\u0442\u0435\u043b\u044f, \u0430\u0434\u0440\u0435\u0441, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0442\u0438\u043f\u044b \u043d\u043e\u043c\u0435\u0440\u043e\u0432, \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c, \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c, \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430. \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0438\u043c\u0435\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043d\u043e\u043c\u0435\u0440\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0438\u043c\u0435\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0441\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043e\u0442\u0435\u043b\u044c \u0438 \u0432\u044b\u0441\u0435\u043b\u0438\u0442\u044c \u0438\u0437 \u043e\u0442\u0435\u043b\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0435\u0432 \u043e\u0442\u0435\u043b\u044f \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446.","title":"Task"},{"location":"lab-2/#models","text":"models.py \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041c\u043e\u0434\u0435\u043b\u044c \u043e\u0442\u0435\u043b\u044f class Hotel ( models . Model ): name = models . CharField ( max_length = 63 ) owner = models . CharField ( max_length = 255 ) address = models . CharField ( max_length = 255 ) description = models . CharField ( max_length = 255 ) \u0412\u0441\u0435 \u043f\u043e\u043b\u044f \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c, \u043e\u0442\u0440\u0430\u0436\u0430\u044e\u0442: \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f; \u0415\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430; \u0410\u0434\u0440\u0435\u0441; \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435. \u041c\u043e\u0434\u0435\u043b\u044c \u043a\u043e\u043c\u043d\u0430\u0442\u044b class Room ( models . Model ): number = models . IntegerField () hotel = models . ForeignKey ( Hotel , on_delete = models . CASCADE ) type = models . CharField ( max_length = 127 ) cost = models . PositiveIntegerField () beds = models . PositiveSmallIntegerField () amenities = models . CharField ( max_length = 255 , blank = True , null = True ) \u041f\u043e\u043b\u044f: \u041d\u043e\u043c\u0435\u0440 \u043a\u043e\u043c\u043d\u0430\u0442\u044b; \u041e\u0442\u0435\u043b\u044c, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043a\u043e\u043c\u043d\u0430\u0442\u0430 (\u0432\u043d. \u043a\u043b\u044e\u0447 \u043d\u0430 \u043e\u0442\u0435\u043b\u044c); \u0422\u0438\u043f \u043a\u043e\u043c\u043d\u0430\u0442\u044b; \u0426\u0435\u043d\u0430 \u0437\u0430 \u043d\u043e\u0447\u044c; \u041a\u043e\u043b-\u0432\u043e \u043c\u0435\u0441\u0442; \u0423\u0434\u043e\u0431\u0441\u0442\u0432\u0430 (\u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u043f\u043e\u043b\u0435). \u041c\u043e\u0434\u0435\u043b\u044c \u0431\u0440\u043e\u043d\u0438 class Booking ( models . Model ): reservee = models . ForeignKey ( User , on_delete = models . CASCADE ) reservation = models . ForeignKey ( Room , on_delete = models . CASCADE ) date_start = models . DateField () date_end = models . DateField () approved = models . BooleanField ( default = False ) \u041f\u043e\u043b\u044f: \u0413\u043e\u0441\u0442\u044c (\u0432\u043d. \u043a\u043b\u044e\u0447 \u043d\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f); \u041d\u043e\u043c\u0435\u0440 (\u0432\u043d. \u043a\u043b\u044e\u0447 \u043d\u0430 \u043a\u043e\u043c\u043d\u0430\u0442\u0443); \u041d\u0430\u0447\u0430\u043b\u043e \u0438 \u043a\u043e\u043d\u0435\u0446 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f; \u0421\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u043d\u043e \u0438\u043b\u0438 \u043d\u0435\u0442 (\u0440\u0435\u0448\u0430\u0435\u0442 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0432 \u043f\u0430\u043d\u0435\u043b\u0438). \u041c\u043e\u0434\u0435\u043b\u044c \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u044b class Review ( models . Model ): booking = models . ForeignKey ( Booking , on_delete = models . CASCADE ) text = models . TextField () rating = models . PositiveSmallIntegerField ( validators = [ MaxValueValidator ( 10 ), MinValueValidator ( 1 ) ] ) \u041f\u043e\u043b\u044f: \u0411\u0440\u043e\u043d\u044c (\u0432\u043d. \u043a\u043b\u044e\u0447 \u043d\u0430 \u0431\u0440\u043e\u043d\u044c); \u0422\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f; \u0420\u0435\u0439\u0442\u0438\u043d\u0433 (\u043e\u0442 1 \u0434\u043e 10 \u0447\u0435\u0440\u0435\u0437 \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u044b.). NB: \u0447\u0435\u0440\u0435\u0437 \u0432\u043d\u0435\u0448\u043d\u0438\u0439 \u043a\u043b\u044e\u0447 \u0431\u0440\u043e\u043d\u0438 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u0441\u044e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0443\u044e \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e: \u0410\u0432\u0442\u043e\u0440\u0430; \u0412\u0440\u0435\u043c\u044f \u0431\u0440\u043e\u043d\u0438.","title":"Models"},{"location":"lab-2/#views","text":"views.py \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f. \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0442\u0435\u043b\u044f \u0412\u0441\u0435 \u043e\u0442\u0435\u043b\u0438: class HotelListView ( ListView ): model = Hotel \u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u043e\u0442\u0435\u043b\u044c: class HotelDetailView ( DetailView ): model = Hotel def get_context_data ( self , ** kwargs ): context = super () . get_context_data ( ** kwargs ) context [ \"rooms\" ] = Room . objects . filter ( hotel = self . object . id ) room_ids = [ room [ \"id\" ] for room in context [ \"rooms\" ] . values ()] delta = timedelta ( days = 30 ) context [ \"bookings\" ] = Booking . objects . filter ( reservation__in = room_ids , date_end__gte = ( datetime . today () - delta )) context [ \"reservees\" ] = User . objects . filter ( id__in = set ( [ booking [ \"reservee_id\" ] for booking in context [ \"bookings\" ] . values ()])) return context \u0424\u0443\u043d\u043a\u0446\u0438\u044f get_context_data \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0430: \u0412\u0441\u0435 \u043a\u043e\u043c\u043d\u0430\u0442\u044b, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043a\u043b\u044e\u0447 \u043d\u0430 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0439 \u043e\u0442\u0435\u043b\u044c; \u0421\u043f\u0438\u0441\u043a\u043e\u043c \u0433\u043e\u0441\u0442\u0435\u0439 \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 30 \u0434\u043d\u0435\u0439. \u0421\u043f\u0438\u0441\u043e\u043a \u0433\u043e\u0441\u0442\u0435\u0439 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u0438\u0449\u0443\u0442 \u0432\u0441\u0435 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 30 \u0434\u043d\u0435\u0439, \u0430 \u0432 \u043d\u0438\u0445 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0433\u043e\u0441\u0442\u0435\u0439. \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043c\u043d\u0430\u0442\u044b \u041a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u0430\u044f \u043a\u043e\u043c\u043d\u0430\u0442\u0430: class RoomDetailView ( DetailView ): model = Room def get_context_data ( self , ** kwargs ): context = super () . get_context_data ( ** kwargs ) user = self . request . user bookings = Booking . objects . filter ( reservation = self . object . id ) booking_ids = [ booking [ 'id' ] for booking in bookings . values ()] reviews = Review . objects . filter ( booking__in = booking_ids ) reviews_by_user = 0 for review in reviews : if review . booking . reservee == user : reviews_by_user += 1 for booking in bookings : if booking . reservee == user : reviews_by_user -= 1 review_form = ReviewForm () if reviews_by_user == 0 : review_form = None booking_form = BookingForm () context [ \"reviews\" ] = reviews context [ \"review_form\" ] = review_form context [ \"booking_form\" ] = booking_form return context def post ( self , request , * args , ** kwargs ): user = request . user room = self . get_object () if 'review_post' in self . request . POST : review_form = ReviewForm ( self . request . POST ) if review_form . is_valid (): review_form = review_form . save ( commit = False ) review_form . booking = Booking . objects . filter ( reservation = room . id , reservee = user ) . last () review_form . save () elif 'booking_post' in self . request . POST : booking_form = BookingForm ( self . request . POST ) if booking_form . is_valid (): booking_form = booking_form . save ( commit = False ) booking_form . reservee = user booking_form . reservation = room booking_form . save () return HttpResponseRedirect ( reverse ( 'bookings' )) return HttpResponseRedirect ( reverse ( 'get_room' , args = ( self . kwargs [ 'hotel_id' ], room . id ,))) \u0424\u0443\u043d\u043a\u0446\u0438\u044f get_context_data \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0432 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442: \u0412\u0441\u0435 \u043e\u0431\u0437\u043e\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u043b\u0438\u0441\u044c \u043d\u0430 \u0431\u0440\u043e\u043d\u044c \u0434\u0430\u043d\u043d\u043e\u0439 \u043a\u043e\u043c\u043d\u0430\u0442\u044b; \u0424\u043e\u0440\u043c\u0430 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f; \u0424\u043e\u0440\u043c\u0430 \u043e\u0442\u0437\u044b\u0432\u0430, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043b \u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u0447\u0438\u0441\u043b\u043e \u0440\u0430\u0437, \u0447\u0435\u043c \u0443\u0436\u0435 \u043e\u0441\u0442\u0430\u0432\u0438\u043b \u043e\u0442\u0437\u044b\u0432\u043e\u0432. \u0424\u0443\u043d\u043a\u0446\u0438\u044f post \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0444\u043e\u0440\u043c\u044b, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441\u0434\u0435\u043b\u0430\u043b \u0431\u0440\u043e\u043d\u044c, \u0442\u043e \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0435\u0433\u043e \u043a \u0441\u0432\u043e\u0438\u043c \u0431\u0440\u043e\u043d\u044f\u043c. \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0431\u0440\u043e\u043d\u0438 \u0412\u0441\u0435 \u0431\u0440\u043e\u043d\u0438 \u0433\u043e\u0441\u0442\u044f: class BookingListView ( ListView ): model = Booking def get_queryset ( self ): return self . model . objects . filter ( reservee = self . request . user ) \u0424\u043e\u0440\u043c\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0431\u0440\u043e\u043d\u0438: class BookingDeleteView ( DeleteView ): model = Booking success_url = '/bookings/' def get_context_data ( self , ** kwargs ): context = super () . get_context_data ( ** kwargs ) user = self . request . user context [ \"valid_user\" ] = True if self . object . reservee == user else False return context \u0424\u043e\u0440\u043c\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0431\u0440\u043e\u043d\u0438: class BookingUpdateView ( UpdateView ): model = Booking fields = [ 'date_start' , 'date_end' ] success_url = '/bookings/' def get_context_data ( self , ** kwargs ): context = super () . get_context_data ( ** kwargs ) user = self . request . user context [ \"valid_user\" ] = True if self . object . reservee == user else False return context NB: \u0443 \u043e\u0431\u0435\u0438\u0445 \u0444\u043e\u0440\u043c \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u043d\u0438\u043a\u0442\u043e \u043a\u0440\u043e\u043c\u0435 \u0433\u043e\u0441\u0442\u044f (\u0438 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430) \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a \u043d\u0435\u0439 \u0434\u043e\u0441\u0442\u0443\u043f.","title":"Views"},{"location":"lab-2/#templates","text":"\u0412 hotels_app/templates \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f \u0448\u0430\u0431\u043b\u043e\u043d\u044b \u043f\u043e\u0434 \u043a\u0430\u0436\u0434\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435.","title":"Templates"},{"location":"lab-2/#forms","text":"forms.py \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435 \u0444\u043e\u0440\u043c\u044b. \u0424\u043e\u0440\u043c\u0430 \u043e\u0431\u0437\u043e\u0440\u0430 class ReviewForm ( ModelForm ): class Meta : model = Review fields = [ 'text' , 'rating' ] \u0424\u043e\u0440\u043c\u0430 \u0431\u0440\u043e\u043d\u0438 class BookingForm ( ModelForm ): class Meta : model = Booking fields = [ 'date_start' , 'date_end' ] def clean ( self ): cleaned_data = super () . clean () start_date = cleaned_data . get ( \"date_start\" ) end_date = cleaned_data . get ( \"date_end\" ) if end_date < start_date : raise ValidationError ( \"End date should be greater than start date.\" ) \u0415\u0441\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u0434\u0430\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u0431\u0440\u043e\u043d\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0434\u043e \u043a\u043e\u043d\u0446\u0430.","title":"Forms"},{"location":"lab-2/#urls","text":"","title":"URLs"},{"location":"lab-2/#project","text":"path ( \"admin/\" , admin . site . urls ), path ( 'accounts/' , include ( 'allauth.urls' )), path ( \"\" , include ( \"hotels_app.urls\" )), \u0415\u0441\u0442\u044c \u0442\u0440\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0430: 1. \u0410\u0434\u043c\u0438\u043d\u043a\u0430; 2. \u0410\u043a\u043a\u0430\u0443\u043d\u0442\u044b ( django-allauth ); 3. \u041f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 ( hotels_app ).","title":"Project"},{"location":"lab-2/#apps","text":"\u041f\u0443\u0442\u0438 \u0434\u043e \u043e\u0442\u0435\u043b\u044f \u0438 \u043a\u043e\u043c\u043d\u0430\u0442: path ( 'hotel/list/' , HotelListView . as_view ()), path ( 'hotel/<int:pk>/' , HotelDetailView . as_view ()), path ( 'hotel/<hotel_id>/<int:pk>/' , RoomDetailView . as_view (), name = \"get_room\" ), \u041f\u0443\u0442\u0438 \u0434\u043e \u0431\u0440\u043e\u043d\u044c: path ( 'bookings/' , login_required ( BookingListView . as_view ()), name = \"bookings\" ), path ( 'bookings/<int:pk>/delete/' , login_required ( BookingDeleteView . as_view ())), path ( 'bookings/<int:pk>/update/' , login_required ( BookingUpdateView . as_view ())), \u0412\u0441\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f class based , \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434 as_view() ; \u0423 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0435\u0441\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043b\u043e\u0433\u0438\u043d login_required() .","title":"Apps"},{"location":"lab-2/#examples","text":"","title":"Examples"},{"location":"prac-3-1/","text":"Practical 3 Django \u0437\u0430\u043f\u0440\u043e\u0441\u044b Models \u041c\u043e\u0434\u0435\u043b\u0438 \u0431\u0435\u0437 \u043c\u0435\u0442\u043e\u0434\u043e\u0432: class Car ( models . Model ): state_number = models . CharField ( max_length = 15 ) brand = models . CharField ( max_length = 20 ) model = models . CharField ( max_length = 20 ) color = models . CharField ( max_length = 30 , null = True , blank = True ) class Owner ( AbstractUser ): first_name = models . CharField ( max_length = 30 , null = True , blank = True ) second_name = models . CharField ( max_length = 30 , null = True , blank = True ) birthday = models . DateField ( null = True , blank = True ) cars = models . ManyToManyField ( Car , through = 'Ownership' ) passport = models . IntegerField ( null = True , blank = True ) address = models . CharField ( max_length = 50 , null = True , blank = True ) nationality = models . CharField ( max_length = 15 , null = True , blank = True ) class DriverLicense ( models . Model ): license_owner = models . ForeignKey ( settings . AUTH_USER_MODEL , on_delete = models . CASCADE ) license_number = models . CharField ( max_length = 10 ) type = models . CharField ( max_length = 10 ) issue_date = models . DateField () class Ownership ( models . Model ): ownership_owner = models . ForeignKey ( settings . AUTH_USER_MODEL , on_delete = models . CASCADE ) ownership_car = models . ForeignKey ( Car , on_delete = models . CASCADE ) date_start = models . DateField () date_end = models . DateField ( null = True , blank = True ) \u0414\u0430\u043b\u0435\u0435 \u0432\u0445\u043e\u0434\u0438\u043c \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u0440\u0435\u0436\u0438\u043c (\u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c python console \u0432 pycharm ): python manage . py shell from practical_work_1.models import * 3.1 \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0410\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b: owner = Owner . objects . create ( first_name = 'Mario' , second_name = 'Mario' , username = 'supermario' , password = 'superpassword1' ) owner = Owner . objects . create ( first_name = 'Donkey' , second_name = 'Kong' , username = 'koong' , password = 'superpassword2' ) owner = Owner . objects . create ( first_name = 'Bowser' , second_name = 'Bowser' , username = 'bo' , password = 'superpassword3' ) owner = Owner . objects . create ( first_name = 'Yoshi' , second_name = 'Yoshi' , username = 'yoyo' , password = 'superpassword4' ) owner = Owner . objects . create ( first_name = 'Princess' , second_name = 'Daisy' , username = 'daisy' , password = 'superpassword5' ) owner = Owner . objects . create ( first_name = 'Princess' , second_name = 'Peach' , username = 'peach' , password = 'superpassword6' ) \u041c\u0430\u0448\u0438\u043d\u044b: car = Car . objects . create ( state_number = 'C031AP' , brand = 'Mario Kart' , model = 'MK Deluxe 8' , color = 'red' ) car = Car . objects . create ( state_number = 'C032AP' , brand = 'Mario Kart' , model = 'MK 7' , color = 'blue' ) car = Car . objects . create ( state_number = 'C033AP' , brand = 'Mario Kart' , model = 'MK 8' , color = 'red' ) car = Car . objects . create ( state_number = 'C034AP' , brand = 'Mario Kart' , model = 'MK 8' , color = 'green' ) car = Car . objects . create ( state_number = 'C035AP' , brand = 'Mario Kart' , model = 'MK DS' , color = 'orange' ) car = Car . objects . create ( state_number = 'C036AP' , brand = 'Mario Kart' , model = 'MK 64' , color = 'pink' ) \u0423\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: license = DriverLicense . objects . create ( license_owner = Owner . objects . get ( username = 'supermario' ), license_number = 'PW3001' , type = 'MK' , issue_date = '2020-10-10' ) license = DriverLicense . objects . create ( license_owner = Owner . objects . get ( username = 'koong' ), license_number = 'PW3002' , type = 'MK' , issue_date = '2019-10-10' ) license = DriverLicense . objects . create ( license_owner = Owner . objects . get ( username = 'bo' ), license_number = 'PW3003' , type = 'MK' , issue_date = '2018-10-10' ) license = DriverLicense . objects . create ( license_owner = Owner . objects . get ( username = 'yoyo' ), license_number = 'PW3004' , type = 'MK' , issue_date = '2017-10-10' ) license = DriverLicense . objects . create ( license_owner = Owner . objects . get ( username = 'daisy' ), license_number = 'PW3005' , type = 'MK' , issue_date = '2016-10-10' ) license = DriverLicense . objects . create ( license_owner = Owner . objects . get ( username = 'peach' ), license_number = 'PW3006' , type = 'MK' , issue_date = '2015-10-10' ) \u0412\u043b\u0430\u0434\u0435\u043d\u0438\u044f: ownership = Ownership . objects . create ( ownership_owner = Owner . objects . get ( username = 'supermario' ), ownership_car = Car . objects . get ( id = 11 ), date_start = '2021-10-10' ) ownership = Ownership . objects . create ( ownership_owner = Owner . objects . get ( username = 'koong' ), ownership_car = Car . objects . get ( id = 12 ), date_start = '2021-10-10' ) ownership = Ownership . objects . create ( ownership_owner = Owner . objects . get ( username = 'bo' ), ownership_car = Car . objects . get ( id = 13 ), date_start = '2021-10-10' ) ownership = Ownership . objects . create ( ownership_owner = Owner . objects . get ( username = 'yoyo' ), ownership_car = Car . objects . get ( id = 14 ), date_start = '2021-10-10' ) ownership = Ownership . objects . create ( ownership_owner = Owner . objects . get ( username = 'daisy' ), ownership_car = Car . objects . get ( id = 15 ), date_start = '2022-10-10' ) ownership = Ownership . objects . create ( ownership_owner = Owner . objects . get ( username = 'peach' ), ownership_car = Car . objects . get ( id = 16 ), date_start = '2021-10-10' ) 3.2 \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u043c\u0430\u0448\u0438\u043d \u043c\u0430\u0440\u043a\u0438 Mario Kart : \u0417\u0430\u043f\u0440\u043e\u0441: Car . objects . filter ( brand = \"Mario Kart\" ) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: < QuerySet [ < Car : Mario Kart MK Deluxe 8 > , < Car : Mario Kart MK 7 > , < Car : Mario Kart MK 8 > , < Car : Mario Kart MK 8 > , < Car : Mario Kart MK DS > , < Car : Mario Kart MK 64 > ] > \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c Mario : \u0417\u0430\u043f\u0440\u043e\u0441: Owner . objects . filter ( first_name = \"Mario\" ) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: < QuerySet [ < Owner : Mario Mario > ] > NB: \u0442\u0443\u0442 \u0441\u0442\u043e\u0438\u043b\u043e \u0431\u044b\u043b\u043e \u0431\u044b \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c first_name__contains , \u0435\u0441\u043b\u0438 \u0431\u044b \u0438\u043c\u044f \u0431\u044b\u043b\u043e \u0441\u043e\u0441\u0442\u0430\u0432\u043d\u044b\u043c, \u043d\u043e \u0434\u043b\u044f \u0444\u0430\u043c\u0438\u043b\u0438\u0438 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0435 \u043f\u043e\u043b\u0435. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f: \u0417\u0430\u043f\u0440\u043e\u0441: DriverLicense . objects . get ( license_owner = Owner . objects . order_by ( \"?\" ) . first () . id ) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: < DriverLicense : DriverLicense object ( 1 ) > \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043c\u0430\u0448\u0438\u043d \u0441 \u0446\u0432\u0435\u0442\u043e\u043c orange : \u0417\u0430\u043f\u0440\u043e\u0441: Owner . objects . filter ( cars__color__contains = \"orange\" ) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: < QuerySet [ < Owner : Princess Daisy > ] > NB: \u0443 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u043e\u0441\u0442\u0430\u0432\u043d\u043e\u0439 \u0446\u0432\u0435\u0442, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u201cYellow, Red\u201d, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0438\u0434\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435, \u0430 \u043d\u0435 \u043d\u0430 \u044d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u044c. \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2022: \u0417\u0430\u043f\u0440\u043e\u0441: Owner . objects . filter ( ownership__date_start__gte = '2022-01-01' ) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: < QuerySet [ < Owner : Princess Daisy > ] > 3.3 \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0417\u0430\u043f\u0440\u043e\u0441: DriverLicense . objects . aggregate ( start_date = Min ( 'issue_date' )) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: { 'start_date' : datetime . date ( 2015 , 10 , 10 )} NB: \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c from django.db.models import Min \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 \u0417\u0430\u043f\u0440\u043e\u0441: Ownership . objects . aggregate ( start_date = Max ( 'date_start' )) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: { 'start_date' : datetime . date ( 2022 , 10 , 20 )} NB: \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c from django.db.models import Max \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u0417\u0430\u043f\u0440\u043e\u0441: Ownership . objects . values ( 'ownership_owner__username' ) . annotate ( Count ( 'ownership_car' )) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: < QuerySet [{ 'ownership_owner__username' : 'bo' , 'ownership_car__count' : 1 }, { 'ownership_owner__username' : 'daisy' , 'ownership_car__count' : 1 }, { 'ownership_owner__username' : 'koong' , 'ownership_car__count' : 1 }, { 'ownership_owner__username' : 'peach' , 'ownership_car__count' : 1 }, { 'ownership_owner__username' : 'supermario' , 'ownership_car__count' : 1 }, { 'ownership_owner__username' : 'yoy' , 'ownership_car__count' : 1 }] > NB: \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c from django.db.models import Count \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438 \u0417\u0430\u043f\u0440\u043e\u0441: Car . objects . values ( 'brand' ) . annotate ( Count ( 'id' )) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: < QuerySet [{ 'brand' : 'Mario Kart' , 'id__count' : 6 } > \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0417\u0430\u043f\u0440\u043e\u0441: DriverLicense . objects . values ( 'license_owner__username' ) . order_by ( 'issue_date' ) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: < QuerySet [{ 'license_owner__username' : 'peach' }, { 'license_owner__username' : 'daisy' }, { 'license_owner__username' : 'yoyo' }, { 'license_owner__username' : 'bo' }, { 'license_owner__username' : 'koong' }, { 'license_owner__username' : 'supermario' }] >","title":3.1},{"location":"prac-3-1/#practical-3","text":"Django \u0437\u0430\u043f\u0440\u043e\u0441\u044b","title":"Practical 3"},{"location":"prac-3-1/#models","text":"\u041c\u043e\u0434\u0435\u043b\u0438 \u0431\u0435\u0437 \u043c\u0435\u0442\u043e\u0434\u043e\u0432: class Car ( models . Model ): state_number = models . CharField ( max_length = 15 ) brand = models . CharField ( max_length = 20 ) model = models . CharField ( max_length = 20 ) color = models . CharField ( max_length = 30 , null = True , blank = True ) class Owner ( AbstractUser ): first_name = models . CharField ( max_length = 30 , null = True , blank = True ) second_name = models . CharField ( max_length = 30 , null = True , blank = True ) birthday = models . DateField ( null = True , blank = True ) cars = models . ManyToManyField ( Car , through = 'Ownership' ) passport = models . IntegerField ( null = True , blank = True ) address = models . CharField ( max_length = 50 , null = True , blank = True ) nationality = models . CharField ( max_length = 15 , null = True , blank = True ) class DriverLicense ( models . Model ): license_owner = models . ForeignKey ( settings . AUTH_USER_MODEL , on_delete = models . CASCADE ) license_number = models . CharField ( max_length = 10 ) type = models . CharField ( max_length = 10 ) issue_date = models . DateField () class Ownership ( models . Model ): ownership_owner = models . ForeignKey ( settings . AUTH_USER_MODEL , on_delete = models . CASCADE ) ownership_car = models . ForeignKey ( Car , on_delete = models . CASCADE ) date_start = models . DateField () date_end = models . DateField ( null = True , blank = True ) \u0414\u0430\u043b\u0435\u0435 \u0432\u0445\u043e\u0434\u0438\u043c \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u0440\u0435\u0436\u0438\u043c (\u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c python console \u0432 pycharm ): python manage . py shell from practical_work_1.models import *","title":"Models"},{"location":"prac-3-1/#31","text":"\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0410\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b: owner = Owner . objects . create ( first_name = 'Mario' , second_name = 'Mario' , username = 'supermario' , password = 'superpassword1' ) owner = Owner . objects . create ( first_name = 'Donkey' , second_name = 'Kong' , username = 'koong' , password = 'superpassword2' ) owner = Owner . objects . create ( first_name = 'Bowser' , second_name = 'Bowser' , username = 'bo' , password = 'superpassword3' ) owner = Owner . objects . create ( first_name = 'Yoshi' , second_name = 'Yoshi' , username = 'yoyo' , password = 'superpassword4' ) owner = Owner . objects . create ( first_name = 'Princess' , second_name = 'Daisy' , username = 'daisy' , password = 'superpassword5' ) owner = Owner . objects . create ( first_name = 'Princess' , second_name = 'Peach' , username = 'peach' , password = 'superpassword6' ) \u041c\u0430\u0448\u0438\u043d\u044b: car = Car . objects . create ( state_number = 'C031AP' , brand = 'Mario Kart' , model = 'MK Deluxe 8' , color = 'red' ) car = Car . objects . create ( state_number = 'C032AP' , brand = 'Mario Kart' , model = 'MK 7' , color = 'blue' ) car = Car . objects . create ( state_number = 'C033AP' , brand = 'Mario Kart' , model = 'MK 8' , color = 'red' ) car = Car . objects . create ( state_number = 'C034AP' , brand = 'Mario Kart' , model = 'MK 8' , color = 'green' ) car = Car . objects . create ( state_number = 'C035AP' , brand = 'Mario Kart' , model = 'MK DS' , color = 'orange' ) car = Car . objects . create ( state_number = 'C036AP' , brand = 'Mario Kart' , model = 'MK 64' , color = 'pink' ) \u0423\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: license = DriverLicense . objects . create ( license_owner = Owner . objects . get ( username = 'supermario' ), license_number = 'PW3001' , type = 'MK' , issue_date = '2020-10-10' ) license = DriverLicense . objects . create ( license_owner = Owner . objects . get ( username = 'koong' ), license_number = 'PW3002' , type = 'MK' , issue_date = '2019-10-10' ) license = DriverLicense . objects . create ( license_owner = Owner . objects . get ( username = 'bo' ), license_number = 'PW3003' , type = 'MK' , issue_date = '2018-10-10' ) license = DriverLicense . objects . create ( license_owner = Owner . objects . get ( username = 'yoyo' ), license_number = 'PW3004' , type = 'MK' , issue_date = '2017-10-10' ) license = DriverLicense . objects . create ( license_owner = Owner . objects . get ( username = 'daisy' ), license_number = 'PW3005' , type = 'MK' , issue_date = '2016-10-10' ) license = DriverLicense . objects . create ( license_owner = Owner . objects . get ( username = 'peach' ), license_number = 'PW3006' , type = 'MK' , issue_date = '2015-10-10' ) \u0412\u043b\u0430\u0434\u0435\u043d\u0438\u044f: ownership = Ownership . objects . create ( ownership_owner = Owner . objects . get ( username = 'supermario' ), ownership_car = Car . objects . get ( id = 11 ), date_start = '2021-10-10' ) ownership = Ownership . objects . create ( ownership_owner = Owner . objects . get ( username = 'koong' ), ownership_car = Car . objects . get ( id = 12 ), date_start = '2021-10-10' ) ownership = Ownership . objects . create ( ownership_owner = Owner . objects . get ( username = 'bo' ), ownership_car = Car . objects . get ( id = 13 ), date_start = '2021-10-10' ) ownership = Ownership . objects . create ( ownership_owner = Owner . objects . get ( username = 'yoyo' ), ownership_car = Car . objects . get ( id = 14 ), date_start = '2021-10-10' ) ownership = Ownership . objects . create ( ownership_owner = Owner . objects . get ( username = 'daisy' ), ownership_car = Car . objects . get ( id = 15 ), date_start = '2022-10-10' ) ownership = Ownership . objects . create ( ownership_owner = Owner . objects . get ( username = 'peach' ), ownership_car = Car . objects . get ( id = 16 ), date_start = '2021-10-10' )","title":"3.1"},{"location":"prac-3-1/#32","text":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u043c\u0430\u0448\u0438\u043d \u043c\u0430\u0440\u043a\u0438 Mario Kart : \u0417\u0430\u043f\u0440\u043e\u0441: Car . objects . filter ( brand = \"Mario Kart\" ) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: < QuerySet [ < Car : Mario Kart MK Deluxe 8 > , < Car : Mario Kart MK 7 > , < Car : Mario Kart MK 8 > , < Car : Mario Kart MK 8 > , < Car : Mario Kart MK DS > , < Car : Mario Kart MK 64 > ] > \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c Mario : \u0417\u0430\u043f\u0440\u043e\u0441: Owner . objects . filter ( first_name = \"Mario\" ) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: < QuerySet [ < Owner : Mario Mario > ] > NB: \u0442\u0443\u0442 \u0441\u0442\u043e\u0438\u043b\u043e \u0431\u044b\u043b\u043e \u0431\u044b \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c first_name__contains , \u0435\u0441\u043b\u0438 \u0431\u044b \u0438\u043c\u044f \u0431\u044b\u043b\u043e \u0441\u043e\u0441\u0442\u0430\u0432\u043d\u044b\u043c, \u043d\u043e \u0434\u043b\u044f \u0444\u0430\u043c\u0438\u043b\u0438\u0438 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0435 \u043f\u043e\u043b\u0435. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f: \u0417\u0430\u043f\u0440\u043e\u0441: DriverLicense . objects . get ( license_owner = Owner . objects . order_by ( \"?\" ) . first () . id ) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: < DriverLicense : DriverLicense object ( 1 ) > \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043c\u0430\u0448\u0438\u043d \u0441 \u0446\u0432\u0435\u0442\u043e\u043c orange : \u0417\u0430\u043f\u0440\u043e\u0441: Owner . objects . filter ( cars__color__contains = \"orange\" ) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: < QuerySet [ < Owner : Princess Daisy > ] > NB: \u0443 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u043e\u0441\u0442\u0430\u0432\u043d\u043e\u0439 \u0446\u0432\u0435\u0442, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u201cYellow, Red\u201d, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0438\u0434\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435, \u0430 \u043d\u0435 \u043d\u0430 \u044d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u043d\u0442\u043d\u043e\u0441\u0442\u044c. \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2022: \u0417\u0430\u043f\u0440\u043e\u0441: Owner . objects . filter ( ownership__date_start__gte = '2022-01-01' ) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: < QuerySet [ < Owner : Princess Daisy > ] >","title":"3.2"},{"location":"prac-3-1/#33","text":"\u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0417\u0430\u043f\u0440\u043e\u0441: DriverLicense . objects . aggregate ( start_date = Min ( 'issue_date' )) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: { 'start_date' : datetime . date ( 2015 , 10 , 10 )} NB: \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c from django.db.models import Min \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 \u0417\u0430\u043f\u0440\u043e\u0441: Ownership . objects . aggregate ( start_date = Max ( 'date_start' )) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: { 'start_date' : datetime . date ( 2022 , 10 , 20 )} NB: \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c from django.db.models import Max \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u0417\u0430\u043f\u0440\u043e\u0441: Ownership . objects . values ( 'ownership_owner__username' ) . annotate ( Count ( 'ownership_car' )) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: < QuerySet [{ 'ownership_owner__username' : 'bo' , 'ownership_car__count' : 1 }, { 'ownership_owner__username' : 'daisy' , 'ownership_car__count' : 1 }, { 'ownership_owner__username' : 'koong' , 'ownership_car__count' : 1 }, { 'ownership_owner__username' : 'peach' , 'ownership_car__count' : 1 }, { 'ownership_owner__username' : 'supermario' , 'ownership_car__count' : 1 }, { 'ownership_owner__username' : 'yoy' , 'ownership_car__count' : 1 }] > NB: \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c from django.db.models import Count \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438 \u0417\u0430\u043f\u0440\u043e\u0441: Car . objects . values ( 'brand' ) . annotate ( Count ( 'id' )) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: < QuerySet [{ 'brand' : 'Mario Kart' , 'id__count' : 6 } > \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0417\u0430\u043f\u0440\u043e\u0441: DriverLicense . objects . values ( 'license_owner__username' ) . order_by ( 'issue_date' ) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: < QuerySet [{ 'license_owner__username' : 'peach' }, { 'license_owner__username' : 'daisy' }, { 'license_owner__username' : 'yoyo' }, { 'license_owner__username' : 'bo' }, { 'license_owner__username' : 'koong' }, { 'license_owner__username' : 'supermario' }] >","title":"3.3"},{"location":"prac-3-3-API-1/","text":"Get all warriors \u0412\u044b\u0432\u043e\u0434\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u0432\u043e\u0439\u043d\u0430\u0445, \u0438\u0445 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u044f\u0445 \u0438 \u0443\u043c\u0435\u043d\u0438\u044f\u0445. Information URL: /war/warriors/ Method: GET AUTH required: NO Permissions required: None Data constraints: {} Success Responses Code: 200 OK Content: {[]}","title":"API/warriors[GET]"},{"location":"prac-3-3-API-1/#get-all-warriors","text":"\u0412\u044b\u0432\u043e\u0434\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u0432\u043e\u0439\u043d\u0430\u0445, \u0438\u0445 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u044f\u0445 \u0438 \u0443\u043c\u0435\u043d\u0438\u044f\u0445.","title":"Get all warriors"},{"location":"prac-3-3-API-1/#information","text":"URL: /war/warriors/ Method: GET AUTH required: NO Permissions required: None Data constraints: {}","title":"Information"},{"location":"prac-3-3-API-1/#success-responses","text":"Code: 200 OK Content: {[]}","title":"Success Responses"},{"location":"prac-3-3-API-2/","text":"Get specific warrior \u0412\u044b\u0432\u043e\u0434\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0432\u043e\u0439\u043d\u0435, \u0435\u0433\u043e \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0438 \u0438 \u0443\u043c\u0435\u043d\u0438\u044f\u0445. Information URL: /war/warrior/<int:pk>/ Method: GET AUTH required: NO Permissions required: None Data constraints: {} Success Responses Code: 200 OK Content: {[]}","title":"API/warrior[GET]"},{"location":"prac-3-3-API-2/#get-specific-warrior","text":"\u0412\u044b\u0432\u043e\u0434\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0432\u043e\u0439\u043d\u0435, \u0435\u0433\u043e \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u0438 \u0438 \u0443\u043c\u0435\u043d\u0438\u044f\u0445.","title":"Get specific warrior"},{"location":"prac-3-3-API-2/#information","text":"URL: /war/warrior/<int:pk>/ Method: GET AUTH required: NO Permissions required: None Data constraints: {}","title":"Information"},{"location":"prac-3-3-API-2/#success-responses","text":"Code: 200 OK Content: {[]}","title":"Success Responses"},{"location":"prac-3-3-API-3/","text":"Get all jobs \u0412\u044b\u0432\u043e\u0434\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u044f\u0445. Information URL: /war/jobs/ Method: GET AUTH required: NO Permissions required: None Data constraints: {} Success Responses Code: 200 OK Content: {[]}","title":"API/jobs[GET]"},{"location":"prac-3-3-API-3/#get-all-jobs","text":"\u0412\u044b\u0432\u043e\u0434\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u044f\u0445.","title":"Get all jobs"},{"location":"prac-3-3-API-3/#information","text":"URL: /war/jobs/ Method: GET AUTH required: NO Permissions required: None Data constraints: {}","title":"Information"},{"location":"prac-3-3-API-3/#success-responses","text":"Code: 200 OK Content: {[]}","title":"Success Responses"}]}